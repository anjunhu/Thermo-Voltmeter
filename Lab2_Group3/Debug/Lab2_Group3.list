
Lab2_Group3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ec  080037ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037ec  080037ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037ec  080037ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003800  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003800  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a98  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001542  00000000  00000000  00029ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002b018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002b900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029db7  00000000  00000000  0002c130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000719d  00000000  00000000  00055ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001074e4  00000000  00000000  0005d084  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164568  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002384  00000000  00000000  001645e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003794 	.word	0x08003794

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003794 	.word	0x08003794

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fa68 	bl	80006d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f859 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f943 	bl	8000494 <MX_GPIO_Init>
  MX_ADC1_Init();
 800020e:	f000 f8dd 	bl	80003cc <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)){
 8000212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000216:	4823      	ldr	r0, [pc, #140]	; (80002a4 <main+0xa8>)
 8000218:	f001 fddc 	bl	8001dd4 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d10f      	bne.n	8000242 <main+0x46>
		  HAL_Delay(10);
 8000222:	200a      	movs	r0, #10
 8000224:	f000 facc 	bl	80007c0 <HAL_Delay>
		  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)){
 8000228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022c:	481d      	ldr	r0, [pc, #116]	; (80002a4 <main+0xa8>)
 800022e:	f001 fdd1 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d104      	bne.n	8000242 <main+0x46>
		  		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800023c:	481a      	ldr	r0, [pc, #104]	; (80002a8 <main+0xac>)
 800023e:	f001 fdf9 	bl	8001e34 <HAL_GPIO_TogglePin>
		  }
	  }

	  HAL_ADC_Start(&hadc1);
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <main+0xb0>)
 8000244:	f000 fe02 	bl	8000e4c <HAL_ADC_Start>
      if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){	//checks if conversion is done
 8000248:	2164      	movs	r1, #100	; 0x64
 800024a:	4818      	ldr	r0, [pc, #96]	; (80002ac <main+0xb0>)
 800024c:	f000 fe61 	bl	8000f12 <HAL_ADC_PollForConversion>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1dd      	bne.n	8000212 <main+0x16>
    	  adcVolts = HAL_ADC_GetValue(&hadc1);
 8000256:	4815      	ldr	r0, [pc, #84]	; (80002ac <main+0xb0>)
 8000258:	f000 fee3 	bl	8001022 <HAL_ADC_GetValue>
 800025c:	6078      	str	r0, [r7, #4]
    	  // a) the internal reference voltage and b) the internal temperature sensor.
    	  tempCelcius = (float) __HAL_ADC_CALC_TEMPERATURE(3300,  HAL_ADC_GetValue(&hadc1), ADC_RESOLUTION_12B);
 800025e:	4813      	ldr	r0, [pc, #76]	; (80002ac <main+0xb0>)
 8000260:	f000 fedf 	bl	8001022 <HAL_ADC_GetValue>
 8000264:	4602      	mov	r2, r0
 8000266:	f640 43e4 	movw	r3, #3300	; 0xce4
 800026a:	fb03 f302 	mul.w	r3, r3, r2
 800026e:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <main+0xb4>)
 8000270:	fba2 2303 	umull	r2, r3, r2, r3
 8000274:	099b      	lsrs	r3, r3, #6
 8000276:	461a      	mov	r2, r3
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <main+0xb8>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	2264      	movs	r2, #100	; 0x64
 8000280:	fb02 f203 	mul.w	r2, r2, r3
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <main+0xbc>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	4619      	mov	r1, r3
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <main+0xb8>)
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	1acb      	subs	r3, r1, r3
 8000290:	fb92 f3f3 	sdiv	r3, r2, r3
 8000294:	331e      	adds	r3, #30
 8000296:	ee07 3a90 	vmov	s15, r3
 800029a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800029e:	edc7 7a00 	vstr	s15, [r7]
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)){
 80002a2:	e7b6      	b.n	8000212 <main+0x16>
 80002a4:	48000800 	.word	0x48000800
 80002a8:	48000400 	.word	0x48000400
 80002ac:	20000028 	.word	0x20000028
 80002b0:	057619f1 	.word	0x057619f1
 80002b4:	1fff75a8 	.word	0x1fff75a8
 80002b8:	1fff75ca 	.word	0x1fff75ca

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b0bc      	sub	sp, #240	; 0xf0
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80002c6:	2244      	movs	r2, #68	; 0x44
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 fa5a 	bl	8003784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2294      	movs	r2, #148	; 0x94
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 fa4c 	bl	8003784 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80002ec:	2000      	movs	r0, #0
 80002ee:	f001 fddb 	bl	8001ea8 <HAL_PWREx_ControlVoltageScaling>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x40>
  {
    Error_Handler();
 80002f8:	f000 f91c 	bl	8000534 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002fc:	2310      	movs	r3, #16
 80002fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000302:	2301      	movs	r3, #1
 8000304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800030e:	2360      	movs	r3, #96	; 0x60
 8000310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	2302      	movs	r3, #2
 8000316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800031a:	2301      	movs	r3, #1
 800031c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000320:	2301      	movs	r3, #1
 8000322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000326:	233c      	movs	r3, #60	; 0x3c
 8000328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800032c:	2302      	movs	r3, #2
 800032e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000332:	2302      	movs	r3, #2
 8000334:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000338:	2302      	movs	r3, #2
 800033a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fe54 	bl	8001ff0 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800034e:	f000 f8f1 	bl	8000534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2303      	movs	r3, #3
 800035a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000370:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000374:	2105      	movs	r1, #5
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fa60 	bl	800283c <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000382:	f000 f8d7 	bl	8000534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800038a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800038c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000394:	2301      	movs	r3, #1
 8000396:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000398:	2301      	movs	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800039c:	2318      	movs	r3, #24
 800039e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80003a0:	2302      	movs	r3, #2
 80003a2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003a4:	2302      	movs	r3, #2
 80003a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003a8:	2302      	movs	r3, #2
 80003aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003b0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4618      	mov	r0, r3
 80003b6:	f002 fcb9 	bl	8002d2c <HAL_RCCEx_PeriphCLKConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80003c0:	f000 f8b8 	bl	8000534 <Error_Handler>
  }
}
 80003c4:	bf00      	nop
 80003c6:	37f0      	adds	r7, #240	; 0xf0
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	463b      	mov	r3, r7
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e2:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003e4:	4a29      	ldr	r2, [pc, #164]	; (800048c <MX_ADC1_Init+0xc0>)
 80003e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ee:	4b26      	ldr	r3, [pc, #152]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000402:	2204      	movs	r2, #4
 8000404:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000408:	2200      	movs	r2, #0
 800040a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_ADC1_Init+0xbc>)
 800040e:	2200      	movs	r2, #0
 8000410:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000412:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000414:	2201      	movs	r2, #1
 8000416:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_ADC1_Init+0xbc>)
 800041a:	2200      	movs	r2, #0
 800041c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000428:	2200      	movs	r2, #0
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <MX_ADC1_Init+0xbc>)
 800042e:	2200      	movs	r2, #0
 8000430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000436:	2200      	movs	r2, #0
 8000438:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800043a:	4b13      	ldr	r3, [pc, #76]	; (8000488 <MX_ADC1_Init+0xbc>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000442:	4811      	ldr	r0, [pc, #68]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000444:	f000 fbb8 	bl	8000bb8 <HAL_ADC_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800044e:	f000 f871 	bl	8000534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;//ADC_CHANNEL_VREFINT; //
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_ADC1_Init+0xc4>)
 8000454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000456:	2306      	movs	r3, #6
 8000458:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800045a:	2302      	movs	r3, #2
 800045c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800045e:	237f      	movs	r3, #127	; 0x7f
 8000460:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000462:	2304      	movs	r3, #4
 8000464:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046a:	463b      	mov	r3, r7
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000470:	f000 fde4 	bl	800103c <HAL_ADC_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800047a:	f000 f85b 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000028 	.word	0x20000028
 800048c:	50040000 	.word	0x50040000
 8000490:	c7520000 	.word	0xc7520000

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <MX_GPIO_Init+0x94>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a1e      	ldr	r2, [pc, #120]	; (8000528 <MX_GPIO_Init+0x94>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <MX_GPIO_Init+0x94>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <MX_GPIO_Init+0x94>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a18      	ldr	r2, [pc, #96]	; (8000528 <MX_GPIO_Init+0x94>)
 80004c8:	f043 0302 	orr.w	r3, r3, #2
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <MX_GPIO_Init+0x94>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0302 	and.w	r3, r3, #2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e0:	4812      	ldr	r0, [pc, #72]	; (800052c <MX_GPIO_Init+0x98>)
 80004e2:	f001 fc8f 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80004e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4619      	mov	r1, r3
 80004fa:	480d      	ldr	r0, [pc, #52]	; (8000530 <MX_GPIO_Init+0x9c>)
 80004fc:	f001 fad8 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000500:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	2301      	movs	r3, #1
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	4619      	mov	r1, r3
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <MX_GPIO_Init+0x98>)
 800051a:	f001 fac9 	bl	8001ab0 <HAL_GPIO_Init>

}
 800051e:	bf00      	nop
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	48000400 	.word	0x48000400
 8000530:	48000800 	.word	0x48000800

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053a:	e7fe      	b.n	800053a <Error_Handler+0x6>

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x44>)
 8000544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x44>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6613      	str	r3, [r2, #96]	; 0x60
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x44>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_MspInit+0x44>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_MspInit+0x44>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	6593      	str	r3, [r2, #88]	; 0x58
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_MspInit+0x44>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <HAL_ADC_MspInit+0x38>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d10b      	bne.n	80005ae <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_ADC_MspInit+0x3c>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <HAL_ADC_MspInit+0x3c>)
 800059c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <HAL_ADC_MspInit+0x3c>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	50040000 	.word	0x50040000
 80005c0:	40021000 	.word	0x40021000

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler+0x4>

080005ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <MemManage_Handler+0x4>

080005d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000610:	f000 f8b6 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <SystemInit+0x64>)
 800061e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000622:	4a16      	ldr	r2, [pc, #88]	; (800067c <SystemInit+0x64>)
 8000624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <SystemInit+0x68>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <SystemInit+0x68>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <SystemInit+0x68>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <SystemInit+0x68>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <SystemInit+0x68>)
 8000644:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000648:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800064c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <SystemInit+0x68>)
 8000650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000654:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <SystemInit+0x68>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <SystemInit+0x68>)
 800065c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000660:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <SystemInit+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <SystemInit+0x64>)
 800066a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800066e:	609a      	str	r2, [r3, #8]
#endif
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	40021000 	.word	0x40021000

08000684 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000688:	f7ff ffc6 	bl	8000618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800068c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800068e:	e003      	b.n	8000698 <LoopCopyDataInit>

08000690 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000692:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000694:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000696:	3104      	adds	r1, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800069c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800069e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006a0:	d3f6      	bcc.n	8000690 <CopyDataInit>
	ldr	r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80006a4:	e002      	b.n	80006ac <LoopFillZerobss>

080006a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006a8:	f842 3b04 	str.w	r3, [r2], #4

080006ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <LoopForever+0x16>)
	cmp	r2, r3
 80006ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006b0:	d3f9      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b2:	f003 f843 	bl	800373c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006b6:	f7ff fda1 	bl	80001fc <main>

080006ba <LoopForever>:

LoopForever:
    b LoopForever
 80006ba:	e7fe      	b.n	80006ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006bc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80006c0:	080037f4 	.word	0x080037f4
	ldr	r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006c8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006cc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006d0:	20000094 	.word	0x20000094

080006d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_IRQHandler>

080006d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006dc:	2300      	movs	r3, #0
 80006de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f001 f9b1 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f80e 	bl	8000708 <HAL_InitTick>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	e001      	b.n	80006fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006f8:	f7ff ff20 	bl	800053c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006fc:	79fb      	ldrb	r3, [r7, #7]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000710:	2300      	movs	r3, #0
 8000712:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <HAL_InitTick+0x6c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d023      	beq.n	8000764 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_InitTick+0x70>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_InitTick+0x6c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f9af 	bl	8001a96 <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10f      	bne.n	800075e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d809      	bhi.n	8000758 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f001 f987 	bl	8001a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_InitTick+0x74>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	e007      	b.n	8000768 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	e004      	b.n	8000768 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	73fb      	strb	r3, [r7, #15]
 8000762:	e001      	b.n	8000768 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000768:	7bfb      	ldrb	r3, [r7, #15]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000008 	.word	0x20000008
 8000778:	20000000 	.word	0x20000000
 800077c:	20000004 	.word	0x20000004

08000780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_IncTick+0x20>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_IncTick+0x24>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_IncTick+0x24>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000090 	.word	0x20000090

080007a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <HAL_GetTick+0x14>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000090 	.word	0x20000090

080007c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c8:	f7ff ffee 	bl	80007a8 <HAL_GetTick>
 80007cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d8:	d005      	beq.n	80007e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_Delay+0x40>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e6:	bf00      	nop
 80007e8:	f7ff ffde 	bl	80007a8 <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8f7      	bhi.n	80007e8 <HAL_Delay+0x28>
  {
  }
}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000008 	.word	0x20000008

08000804 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	431a      	orrs	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	609a      	str	r2, [r3, #8]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	431a      	orrs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	609a      	str	r2, [r3, #8]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3360      	adds	r3, #96	; 0x60
 800087e:	461a      	mov	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <LL_ADC_SetOffset+0x44>)
 800088e:	4013      	ands	r3, r2
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	430a      	orrs	r2, r1
 800089a:	4313      	orrs	r3, r2
 800089c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008a4:	bf00      	nop
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	03fff000 	.word	0x03fff000

080008b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3360      	adds	r3, #96	; 0x60
 80008c2:	461a      	mov	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3360      	adds	r3, #96	; 0x60
 80008f0:	461a      	mov	r2, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	431a      	orrs	r2, r3
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800090a:	bf00      	nop
 800090c:	371c      	adds	r7, #28
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	431a      	orrs	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	615a      	str	r2, [r3, #20]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800094c:	2b00      	cmp	r3, #0
 800094e:	d101      	bne.n	8000954 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000950:	2301      	movs	r3, #1
 8000952:	e000      	b.n	8000956 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000962:	b480      	push	{r7}
 8000964:	b087      	sub	sp, #28
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3330      	adds	r3, #48	; 0x30
 8000972:	461a      	mov	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	f003 030c 	and.w	r3, r3, #12
 800097e:	4413      	add	r3, r2
 8000980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	f003 031f 	and.w	r3, r3, #31
 800098c:	211f      	movs	r1, #31
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	401a      	ands	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	0e9b      	lsrs	r3, r3, #26
 800099a:	f003 011f 	and.w	r1, r3, #31
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	f003 031f 	and.w	r3, r3, #31
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	431a      	orrs	r2, r3
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009ae:	bf00      	nop
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b087      	sub	sp, #28
 80009be:	af00      	add	r7, sp, #0
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3314      	adds	r3, #20
 80009ca:	461a      	mov	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	0e5b      	lsrs	r3, r3, #25
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	4413      	add	r3, r2
 80009d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	0d1b      	lsrs	r3, r3, #20
 80009e2:	f003 031f 	and.w	r3, r3, #31
 80009e6:	2107      	movs	r1, #7
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	401a      	ands	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	0d1b      	lsrs	r3, r3, #20
 80009f4:	f003 031f 	and.w	r3, r3, #31
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	431a      	orrs	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a04:	bf00      	nop
 8000a06:	371c      	adds	r7, #28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0318 	and.w	r3, r3, #24
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a34:	40d9      	lsrs	r1, r3
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	400b      	ands	r3, r1
 8000a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	0007ffff 	.word	0x0007ffff

08000a58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000a68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	6093      	str	r3, [r2, #8]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a90:	d101      	bne.n	8000a96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ab8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ae0:	d101      	bne.n	8000ae6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e000      	b.n	8000ae8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b08:	f043 0201 	orr.w	r2, r3, #1
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d101      	bne.n	8000b34 <LL_ADC_IsEnabled+0x18>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <LL_ADC_IsEnabled+0x1a>
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b56:	f043 0204 	orr.w	r2, r3, #4
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d101      	bne.n	8000b82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	2b08      	cmp	r3, #8
 8000ba2:	d101      	bne.n	8000ba8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e000      	b.n	8000baa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e12d      	b.n	8000e2e <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	691b      	ldr	r3, [r3, #16]
 8000bd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fccf 	bl	8000584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff3f 	bl	8000a7c <LL_ADC_IsDeepPowerDownEnabled>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff25 	bl	8000a58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff5a 	bl	8000acc <LL_ADC_IsInternalRegulatorEnabled>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d113      	bne.n	8000c46 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff3e 	bl	8000aa4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c28:	4b83      	ldr	r3, [pc, #524]	; (8000e38 <HAL_ADC_Init+0x280>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	099b      	lsrs	r3, r3, #6
 8000c2e:	4a83      	ldr	r2, [pc, #524]	; (8000e3c <HAL_ADC_Init+0x284>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	099b      	lsrs	r3, r3, #6
 8000c36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c38:	e002      	b.n	8000c40 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f9      	bne.n	8000c3a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff3e 	bl	8000acc <LL_ADC_IsInternalRegulatorEnabled>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10d      	bne.n	8000c72 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f043 0210 	orr.w	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c66:	f043 0201 	orr.w	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff77 	bl	8000b6a <LL_ADC_REG_IsConversionOngoing>
 8000c7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 80c8 	bne.w	8000e1c <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 80c4 	bne.w	8000e1c <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c9c:	f043 0202 	orr.w	r2, r3, #2
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff37 	bl	8000b1c <LL_ADC_IsEnabled>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10b      	bne.n	8000ccc <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000cb4:	4862      	ldr	r0, [pc, #392]	; (8000e40 <HAL_ADC_Init+0x288>)
 8000cb6:	f7ff ff31 	bl	8000b1c <LL_ADC_IsEnabled>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d105      	bne.n	8000ccc <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	485f      	ldr	r0, [pc, #380]	; (8000e44 <HAL_ADC_Init+0x28c>)
 8000cc8:	f7ff fd9c 	bl	8000804 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7e5b      	ldrb	r3, [r3, #25]
 8000cd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000cdc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ce2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d106      	bne.n	8000d08 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	045b      	lsls	r3, r3, #17
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d009      	beq.n	8000d24 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <HAL_ADC_Init+0x290>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	6812      	ldr	r2, [r2, #0]
 8000d32:	69b9      	ldr	r1, [r7, #24]
 8000d34:	430b      	orrs	r3, r1
 8000d36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff14 	bl	8000b6a <LL_ADC_REG_IsConversionOngoing>
 8000d42:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff21 	bl	8000b90 <LL_ADC_INJ_IsConversionOngoing>
 8000d4e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d140      	bne.n	8000dd8 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d13d      	bne.n	8000dd8 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7e1b      	ldrb	r3, [r3, #24]
 8000d64:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d66:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d6e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d7e:	f023 0306 	bic.w	r3, r3, #6
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	69b9      	ldr	r1, [r7, #24]
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d118      	bne.n	8000dc8 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000da0:	f023 0304 	bic.w	r3, r3, #4
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000dac:	4311      	orrs	r1, r2
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000db2:	4311      	orrs	r1, r2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000db8:	430a      	orrs	r2, r1
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f042 0201 	orr.w	r2, r2, #1
 8000dc4:	611a      	str	r2, [r3, #16]
 8000dc6:	e007      	b.n	8000dd8 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d10c      	bne.n	8000dfa <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f023 010f 	bic.w	r1, r3, #15
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	1e5a      	subs	r2, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
 8000df8:	e007      	b.n	8000e0a <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 020f 	bic.w	r2, r2, #15
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f023 0303 	bic.w	r3, r3, #3
 8000e12:	f043 0201 	orr.w	r2, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	659a      	str	r2, [r3, #88]	; 0x58
 8000e1a:	e007      	b.n	8000e2c <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	f043 0210 	orr.w	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	053e2d63 	.word	0x053e2d63
 8000e40:	50040000 	.word	0x50040000
 8000e44:	50040300 	.word	0x50040300
 8000e48:	fff0c007 	.word	0xfff0c007

08000e4c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fe86 	bl	8000b6a <LL_ADC_REG_IsConversionOngoing>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d14f      	bne.n	8000f04 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Start+0x26>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e04b      	b.n	8000f0a <HAL_ADC_Start+0xbe>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fcd8 	bl	8001830 <ADC_Enable>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d137      	bne.n	8000efa <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eaa:	d106      	bne.n	8000eba <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb0:	f023 0206 	bic.w	r2, r3, #6
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8000eb8:	e002      	b.n	8000ec0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	221c      	movs	r2, #28
 8000ec6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fe25 	bl	8000b42 <LL_ADC_REG_StartConversion>
 8000ef8:	e006      	b.n	8000f08 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000f02:	e001      	b.n	8000f08 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f04:	2302      	movs	r3, #2
 8000f06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d102      	bne.n	8000f2a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f24:	2308      	movs	r3, #8
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e010      	b.n	8000f4c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3c:	f043 0220 	orr.w	r2, r3, #32
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e068      	b.n	800101a <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000f48:	2304      	movs	r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f4c:	f7ff fc2c 	bl	80007a8 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f52:	e01a      	b.n	8000f8a <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5a:	d016      	beq.n	8000f8a <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f5c:	f7ff fc24 	bl	80007a8 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d302      	bcc.n	8000f72 <HAL_ADC_PollForConversion+0x60>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10b      	bne.n	8000f8a <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f043 0204 	orr.w	r2, r3, #4
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e047      	b.n	800101a <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0dd      	beq.n	8000f54 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fcc7 	bl	800093c <LL_ADC_REG_IsTriggerSourceSWStart>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01c      	beq.n	8000fee <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7e5b      	ldrb	r3, [r3, #25]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d118      	bne.n	8000fee <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d111      	bne.n	8000fee <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d105      	bne.n	8000fee <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d104      	bne.n	8001006 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2208      	movs	r2, #8
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	e008      	b.n	8001018 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d103      	bne.n	8001018 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	220c      	movs	r2, #12
 8001016:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0b6      	sub	sp, #216	; 0xd8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <HAL_ADC_ConfigChannel+0x22>
 800105a:	2302      	movs	r3, #2
 800105c:	e3d4      	b.n	8001808 <HAL_ADC_ConfigChannel+0x7cc>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd7d 	bl	8000b6a <LL_ADC_REG_IsConversionOngoing>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	f040 83b9 	bne.w	80017ea <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d824      	bhi.n	80010ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	3b02      	subs	r3, #2
 8001086:	2b03      	cmp	r3, #3
 8001088:	d81b      	bhi.n	80010c2 <HAL_ADC_ConfigChannel+0x86>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <HAL_ADC_ConfigChannel+0x54>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010a1 	.word	0x080010a1
 8001094:	080010a9 	.word	0x080010a9
 8001098:	080010b1 	.word	0x080010b1
 800109c:	080010b9 	.word	0x080010b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	220c      	movs	r2, #12
 80010a4:	605a      	str	r2, [r3, #4]
          break;
 80010a6:	e011      	b.n	80010cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2212      	movs	r2, #18
 80010ac:	605a      	str	r2, [r3, #4]
          break;
 80010ae:	e00d      	b.n	80010cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2218      	movs	r2, #24
 80010b4:	605a      	str	r2, [r3, #4]
          break;
 80010b6:	e009      	b.n	80010cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010be:	605a      	str	r2, [r3, #4]
          break;
 80010c0:	e004      	b.n	80010cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2206      	movs	r2, #6
 80010c6:	605a      	str	r2, [r3, #4]
          break;
 80010c8:	e000      	b.n	80010cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80010ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	f7ff fc42 	bl	8000962 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fd41 	bl	8000b6a <LL_ADC_REG_IsConversionOngoing>
 80010e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fd4d 	bl	8000b90 <LL_ADC_INJ_IsConversionOngoing>
 80010f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 81c1 	bne.w	8001486 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 81bc 	bne.w	8001486 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001116:	d10f      	bne.n	8001138 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fc49 	bl	80009ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fbf0 	bl	8000916 <LL_ADC_SetSamplingTimeCommonConfig>
 8001136:	e00e      	b.n	8001156 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	461a      	mov	r2, r3
 8001146:	f7ff fc38 	bl	80009ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fbe0 	bl	8000916 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d00a      	beq.n	800118e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6919      	ldr	r1, [r3, #16]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001188:	f7ff fb70 	bl	800086c <LL_ADC_SetOffset>
 800118c:	e17b      	b.n	8001486 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fb8d 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10a      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x17e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fb82 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	0e9b      	lsrs	r3, r3, #26
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	e01e      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x1bc>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fb77 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80011e8:	2320      	movs	r3, #32
 80011ea:	e004      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80011ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001200:	2b00      	cmp	r3, #0
 8001202:	d105      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1d4>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0e9b      	lsrs	r3, r3, #26
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	e018      	b.n	8001242 <HAL_ADC_ConfigChannel+0x206>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800122c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001234:	2320      	movs	r3, #32
 8001236:	e004      	b.n	8001242 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001242:	429a      	cmp	r2, r3
 8001244:	d106      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fb46 	bl	80008e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2101      	movs	r1, #1
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fb2a 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10a      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x244>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2101      	movs	r1, #1
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fb1f 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	0e9b      	lsrs	r3, r3, #26
 800127a:	f003 021f 	and.w	r2, r3, #31
 800127e:	e01e      	b.n	80012be <HAL_ADC_ConfigChannel+0x282>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb14 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800129e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80012ae:	2320      	movs	r3, #32
 80012b0:	e004      	b.n	80012bc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80012b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d105      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x29a>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0e9b      	lsrs	r3, r3, #26
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	e018      	b.n	8001308 <HAL_ADC_ConfigChannel+0x2cc>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80012ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80012f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80012fa:	2320      	movs	r3, #32
 80012fc:	e004      	b.n	8001308 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80012fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001308:	429a      	cmp	r2, r3
 800130a:	d106      	bne.n	800131a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	2101      	movs	r1, #1
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fae3 	bl	80008e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2102      	movs	r1, #2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fac7 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10a      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x30a>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fabc 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	0e9b      	lsrs	r3, r3, #26
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	e01e      	b.n	8001384 <HAL_ADC_ConfigChannel+0x348>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2102      	movs	r1, #2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fab1 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800136c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001374:	2320      	movs	r3, #32
 8001376:	e004      	b.n	8001382 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001378:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <HAL_ADC_ConfigChannel+0x360>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	0e9b      	lsrs	r3, r3, #26
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	e016      	b.n	80013ca <HAL_ADC_ConfigChannel+0x38e>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80013ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80013b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80013bc:	2320      	movs	r3, #32
 80013be:	e004      	b.n	80013ca <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80013c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d106      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	2102      	movs	r1, #2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fa82 	bl	80008e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2103      	movs	r1, #3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fa66 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10a      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x3cc>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2103      	movs	r1, #3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fa5b 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	0e9b      	lsrs	r3, r3, #26
 8001402:	f003 021f 	and.w	r2, r3, #31
 8001406:	e017      	b.n	8001438 <HAL_ADC_ConfigChannel+0x3fc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2103      	movs	r1, #3
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fa50 	bl	80008b4 <LL_ADC_GetOffsetChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001422:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800142a:	2320      	movs	r3, #32
 800142c:	e003      	b.n	8001436 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800142e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001440:	2b00      	cmp	r3, #0
 8001442:	d105      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x414>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0e9b      	lsrs	r3, r3, #26
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	e011      	b.n	8001474 <HAL_ADC_ConfigChannel+0x438>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800145e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001460:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001468:	2320      	movs	r3, #32
 800146a:	e003      	b.n	8001474 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800146c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001474:	429a      	cmp	r2, r3
 8001476:	d106      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2200      	movs	r2, #0
 800147e:	2103      	movs	r1, #3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fa2d 	bl	80008e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb46 	bl	8000b1c <LL_ADC_IsEnabled>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 8140 	bne.w	8001718 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	461a      	mov	r2, r3
 80014a6:	f7ff fab3 	bl	8000a10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	4a8f      	ldr	r2, [pc, #572]	; (80016ec <HAL_ADC_ConfigChannel+0x6b0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	f040 8131 	bne.w	8001718 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10b      	bne.n	80014de <HAL_ADC_ConfigChannel+0x4a2>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0e9b      	lsrs	r3, r3, #26
 80014cc:	3301      	adds	r3, #1
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2b09      	cmp	r3, #9
 80014d4:	bf94      	ite	ls
 80014d6:	2301      	movls	r3, #1
 80014d8:	2300      	movhi	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	e019      	b.n	8001512 <HAL_ADC_ConfigChannel+0x4d6>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80014ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80014f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80014f6:	2320      	movs	r3, #32
 80014f8:	e003      	b.n	8001502 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80014fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2b09      	cmp	r3, #9
 800150a:	bf94      	ite	ls
 800150c:	2301      	movls	r3, #1
 800150e:	2300      	movhi	r3, #0
 8001510:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001512:	2b00      	cmp	r3, #0
 8001514:	d079      	beq.n	800160a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800151e:	2b00      	cmp	r3, #0
 8001520:	d107      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x4f6>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	0e9b      	lsrs	r3, r3, #26
 8001528:	3301      	adds	r3, #1
 800152a:	069b      	lsls	r3, r3, #26
 800152c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001530:	e015      	b.n	800155e <HAL_ADC_ConfigChannel+0x522>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001542:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800154a:	2320      	movs	r3, #32
 800154c:	e003      	b.n	8001556 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800154e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001550:	fab3 f383 	clz	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	3301      	adds	r3, #1
 8001558:	069b      	lsls	r3, r3, #26
 800155a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_ConfigChannel+0x542>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0e9b      	lsrs	r3, r3, #26
 8001570:	3301      	adds	r3, #1
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	e017      	b.n	80015ae <HAL_ADC_ConfigChannel+0x572>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800158c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001596:	2320      	movs	r3, #32
 8001598:	e003      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800159a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	ea42 0103 	orr.w	r1, r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10a      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x598>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0e9b      	lsrs	r3, r3, #26
 80015c4:	3301      	adds	r3, #1
 80015c6:	f003 021f 	and.w	r2, r3, #31
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	051b      	lsls	r3, r3, #20
 80015d2:	e018      	b.n	8001606 <HAL_ADC_ConfigChannel+0x5ca>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80015e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80015e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80015ec:	2320      	movs	r3, #32
 80015ee:	e003      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80015f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	f003 021f 	and.w	r2, r3, #31
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001606:	430b      	orrs	r3, r1
 8001608:	e081      	b.n	800170e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x5ea>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0e9b      	lsrs	r3, r3, #26
 800161c:	3301      	adds	r3, #1
 800161e:	069b      	lsls	r3, r3, #26
 8001620:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001624:	e015      	b.n	8001652 <HAL_ADC_ConfigChannel+0x616>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800163e:	2320      	movs	r3, #32
 8001640:	e003      	b.n	800164a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	3301      	adds	r3, #1
 800164c:	069b      	lsls	r3, r3, #26
 800164e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x636>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	0e9b      	lsrs	r3, r3, #26
 8001664:	3301      	adds	r3, #1
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	e017      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x666>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	61fb      	str	r3, [r7, #28]
  return result;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800168a:	2320      	movs	r3, #32
 800168c:	e003      	b.n	8001696 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	3301      	adds	r3, #1
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	ea42 0103 	orr.w	r1, r2, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10d      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x692>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0e9b      	lsrs	r3, r3, #26
 80016b8:	3301      	adds	r3, #1
 80016ba:	f003 021f 	and.w	r2, r3, #31
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	3b1e      	subs	r3, #30
 80016c6:	051b      	lsls	r3, r3, #20
 80016c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016cc:	e01e      	b.n	800170c <HAL_ADC_ConfigChannel+0x6d0>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	613b      	str	r3, [r7, #16]
  return result;
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d104      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80016e6:	2320      	movs	r3, #32
 80016e8:	e006      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x6bc>
 80016ea:	bf00      	nop
 80016ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	3301      	adds	r3, #1
 80016fa:	f003 021f 	and.w	r2, r3, #31
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	3b1e      	subs	r3, #30
 8001706:	051b      	lsls	r3, r3, #20
 8001708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800170c:	430b      	orrs	r3, r1
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	6892      	ldr	r2, [r2, #8]
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f951 	bl	80009ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <HAL_ADC_ConfigChannel+0x7d4>)
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d06b      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001724:	483b      	ldr	r0, [pc, #236]	; (8001814 <HAL_ADC_ConfigChannel+0x7d8>)
 8001726:	f7ff f893 	bl	8000850 <LL_ADC_GetCommonPathInternalCh>
 800172a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a39      	ldr	r2, [pc, #228]	; (8001818 <HAL_ADC_ConfigChannel+0x7dc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d126      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800173c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d120      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a34      	ldr	r2, [pc, #208]	; (800181c <HAL_ADC_ConfigChannel+0x7e0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d156      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800174e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001756:	4619      	mov	r1, r3
 8001758:	482e      	ldr	r0, [pc, #184]	; (8001814 <HAL_ADC_ConfigChannel+0x7d8>)
 800175a:	f7ff f866 	bl	800082a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_ADC_ConfigChannel+0x7e4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	099b      	lsrs	r3, r3, #6
 8001764:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <HAL_ADC_ConfigChannel+0x7e8>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	099a      	lsrs	r2, r3, #6
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001776:	e002      	b.n	800177e <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3b01      	subs	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f9      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001784:	e03a      	b.n	80017fc <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_ADC_ConfigChannel+0x7ec>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d113      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x77c>
 8001790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10d      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_ADC_ConfigChannel+0x7e0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12a      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ae:	4619      	mov	r1, r3
 80017b0:	4818      	ldr	r0, [pc, #96]	; (8001814 <HAL_ADC_ConfigChannel+0x7d8>)
 80017b2:	f7ff f83a 	bl	800082a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017b6:	e021      	b.n	80017fc <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <HAL_ADC_ConfigChannel+0x7f0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d11c      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d116      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_ADC_ConfigChannel+0x7e0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d111      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e0:	4619      	mov	r1, r3
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <HAL_ADC_ConfigChannel+0x7d8>)
 80017e4:	f7ff f821 	bl	800082a <LL_ADC_SetCommonPathInternalCh>
 80017e8:	e008      	b.n	80017fc <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f043 0220 	orr.w	r2, r3, #32
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001804:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001808:	4618      	mov	r0, r3
 800180a:	37d8      	adds	r7, #216	; 0xd8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	80080000 	.word	0x80080000
 8001814:	50040300 	.word	0x50040300
 8001818:	c7520000 	.word	0xc7520000
 800181c:	50040000 	.word	0x50040000
 8001820:	20000000 	.word	0x20000000
 8001824:	053e2d63 	.word	0x053e2d63
 8001828:	cb840000 	.word	0xcb840000
 800182c:	80000001 	.word	0x80000001

08001830 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff f96d 	bl	8000b1c <LL_ADC_IsEnabled>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d146      	bne.n	80018d6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <ADC_Enable+0xb0>)
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	f043 0210 	orr.w	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e032      	b.n	80018d8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f93c 	bl	8000af4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800187c:	f7fe ff94 	bl	80007a8 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001882:	e021      	b.n	80018c8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f947 	bl	8000b1c <LL_ADC_IsEnabled>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d104      	bne.n	800189e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff f92b 	bl	8000af4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800189e:	f7fe ff83 	bl	80007a8 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d90d      	bls.n	80018c8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f043 0210 	orr.w	r2, r3, #16
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	f043 0201 	orr.w	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e007      	b.n	80018d8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d1d6      	bne.n	8001884 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	8000003f 	.word	0x8000003f

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff47 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff5c 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff8e 	bl	800199c <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffb0 	bl	8001a04 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	e166      	b.n	8001d8e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8158 	beq.w	8001d88 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d00b      	beq.n	8001af8 <HAL_GPIO_Init+0x48>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d007      	beq.n	8001af8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aec:	2b11      	cmp	r3, #17
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	d130      	bne.n	8001b5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b2e:	2201      	movs	r2, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	f003 0201 	and.w	r2, r3, #1
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0xea>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d123      	bne.n	8001be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	6939      	ldr	r1, [r7, #16]
 8001bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0203 	and.w	r2, r3, #3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80b2 	beq.w	8001d88 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c24:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_GPIO_Init+0x2fc>)
 8001c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c28:	4a60      	ldr	r2, [pc, #384]	; (8001dac <HAL_GPIO_Init+0x2fc>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c30:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <HAL_GPIO_Init+0x2fc>)
 8001c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3c:	4a5c      	ldr	r2, [pc, #368]	; (8001db0 <HAL_GPIO_Init+0x300>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c66:	d02b      	beq.n	8001cc0 <HAL_GPIO_Init+0x210>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a52      	ldr	r2, [pc, #328]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d025      	beq.n	8001cbc <HAL_GPIO_Init+0x20c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <HAL_GPIO_Init+0x308>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d01f      	beq.n	8001cb8 <HAL_GPIO_Init+0x208>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a50      	ldr	r2, [pc, #320]	; (8001dbc <HAL_GPIO_Init+0x30c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d019      	beq.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a4f      	ldr	r2, [pc, #316]	; (8001dc0 <HAL_GPIO_Init+0x310>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_GPIO_Init+0x200>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a4e      	ldr	r2, [pc, #312]	; (8001dc4 <HAL_GPIO_Init+0x314>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00d      	beq.n	8001cac <HAL_GPIO_Init+0x1fc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a4d      	ldr	r2, [pc, #308]	; (8001dc8 <HAL_GPIO_Init+0x318>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <HAL_GPIO_Init+0x1f8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a4c      	ldr	r2, [pc, #304]	; (8001dcc <HAL_GPIO_Init+0x31c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_GPIO_Init+0x1f4>
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	e00e      	b.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	e00c      	b.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001ca8:	2306      	movs	r3, #6
 8001caa:	e00a      	b.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001cac:	2305      	movs	r3, #5
 8001cae:	e008      	b.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e004      	b.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	f002 0203 	and.w	r2, r2, #3
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	4093      	lsls	r3, r2
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd2:	4937      	ldr	r1, [pc, #220]	; (8001db0 <HAL_GPIO_Init+0x300>)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_GPIO_Init+0x320>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d04:	4a32      	ldr	r2, [pc, #200]	; (8001dd0 <HAL_GPIO_Init+0x320>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_GPIO_Init+0x320>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d2e:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <HAL_GPIO_Init+0x320>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_GPIO_Init+0x320>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_GPIO_Init+0x320>)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_GPIO_Init+0x320>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d82:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <HAL_GPIO_Init+0x320>)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f47f ae91 	bne.w	8001ac0 <HAL_GPIO_Init+0x10>
  }
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010000 	.word	0x40010000
 8001db4:	48000400 	.word	0x48000400
 8001db8:	48000800 	.word	0x48000800
 8001dbc:	48000c00 	.word	0x48000c00
 8001dc0:	48001000 	.word	0x48001000
 8001dc4:	48001400 	.word	0x48001400
 8001dc8:	48001800 	.word	0x48001800
 8001dcc:	48001c00 	.word	0x48001c00
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e001      	b.n	8001df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43d9      	mvns	r1, r3
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	400b      	ands	r3, r1
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e78:	d102      	bne.n	8001e80 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7e:	e00b      	b.n	8001e98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e8e:	d102      	bne.n	8001e96 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e94:	e000      	b.n	8001e98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001e96:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40007000 	.word	0x40007000

08001ea8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d141      	bne.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb6:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d131      	bne.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec4:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eca:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed4:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001edc:	4a41      	ldr	r2, [pc, #260]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ee4:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2232      	movs	r2, #50	; 0x32
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	4a3f      	ldr	r2, [pc, #252]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	0c9b      	lsrs	r3, r3, #18
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001efa:	e002      	b.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d102      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f2      	bne.n	8001efc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f16:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d158      	bne.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e057      	b.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f2e:	4a2d      	ldr	r2, [pc, #180]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f38:	e04d      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f40:	d141      	bne.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d131      	bne.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f50:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2232      	movs	r2, #50	; 0x32
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	3301      	adds	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f86:	e002      	b.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9a:	d102      	bne.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f2      	bne.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d112      	bne.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e011      	b.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fc4:	e007      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	431bde83 	.word	0x431bde83

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f000 bc16 	b.w	8002830 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002004:	4ba0      	ldr	r3, [pc, #640]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800200e:	4b9e      	ldr	r3, [pc, #632]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80e4 	beq.w	80021ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_RCC_OscConfig+0x4c>
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	f040 808b 	bne.w	800214a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b01      	cmp	r3, #1
 8002038:	f040 8087 	bne.w	800214a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800203c:	4b92      	ldr	r3, [pc, #584]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_OscConfig+0x64>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e3ed      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	4b8b      	ldr	r3, [pc, #556]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <HAL_RCC_OscConfig+0x7e>
 8002064:	4b88      	ldr	r3, [pc, #544]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800206c:	e005      	b.n	800207a <HAL_RCC_OscConfig+0x8a>
 800206e:	4b86      	ldr	r3, [pc, #536]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207a:	4293      	cmp	r3, r2
 800207c:	d223      	bcs.n	80020c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fd90 	bl	8002ba8 <RCC_SetFlashLatencyFromMSIRange>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e3ce      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002092:	4b7d      	ldr	r3, [pc, #500]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7c      	ldr	r2, [pc, #496]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b7a      	ldr	r3, [pc, #488]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4977      	ldr	r1, [pc, #476]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b0:	4b75      	ldr	r3, [pc, #468]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	4972      	ldr	r1, [pc, #456]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
 80020c4:	e025      	b.n	8002112 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c6:	4b70      	ldr	r3, [pc, #448]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6f      	ldr	r2, [pc, #444]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b6d      	ldr	r3, [pc, #436]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	496a      	ldr	r1, [pc, #424]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e4:	4b68      	ldr	r3, [pc, #416]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	4965      	ldr	r1, [pc, #404]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fd50 	bl	8002ba8 <RCC_SetFlashLatencyFromMSIRange>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e38e      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002112:	f000 fcbf 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002116:	4601      	mov	r1, r0
 8002118:	4b5b      	ldr	r3, [pc, #364]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	4a5a      	ldr	r2, [pc, #360]	; (800228c <HAL_RCC_OscConfig+0x29c>)
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	fa21 f303 	lsr.w	r3, r1, r3
 800212e:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_RCC_OscConfig+0x2a0>)
 8002130:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002132:	4b58      	ldr	r3, [pc, #352]	; (8002294 <HAL_RCC_OscConfig+0x2a4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fae6 	bl	8000708 <HAL_InitTick>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d052      	beq.n	80021ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	e372      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d032      	beq.n	80021b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002152:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a4c      	ldr	r2, [pc, #304]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800215e:	f7fe fb23 	bl	80007a8 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002166:	f7fe fb1f 	bl	80007a8 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e35b      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002178:	4b43      	ldr	r3, [pc, #268]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800218a:	f043 0308 	orr.w	r3, r3, #8
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	493a      	ldr	r1, [pc, #232]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	4935      	ldr	r1, [pc, #212]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
 80021b6:	e01a      	b.n	80021ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021b8:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a32      	ldr	r2, [pc, #200]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c4:	f7fe faf0 	bl	80007a8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021cc:	f7fe faec 	bl	80007a8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e328      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1dc>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d073      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x21c>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d10e      	bne.n	8002224 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d10b      	bne.n	8002224 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d063      	beq.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d15f      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e305      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d106      	bne.n	800223c <HAL_RCC_OscConfig+0x24c>
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0x288>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x270>
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x288>
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a08      	ldr	r2, [pc, #32]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fa92 	bl	80007a8 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002286:	e010      	b.n	80022aa <HAL_RCC_OscConfig+0x2ba>
 8002288:	40021000 	.word	0x40021000
 800228c:	080037ac 	.word	0x080037ac
 8002290:	20000000 	.word	0x20000000
 8002294:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe fa86 	bl	80007a8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e2c2      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022aa:	4baf      	ldr	r3, [pc, #700]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x2a8>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fa76 	bl	80007a8 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe fa72 	bl	80007a8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e2ae      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d2:	4ba5      	ldr	r3, [pc, #660]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2d0>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d060      	beq.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_OscConfig+0x310>
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d119      	bne.n	800232e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d116      	bne.n	800232e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002300:	4b99      	ldr	r3, [pc, #612]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_OscConfig+0x328>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e28b      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b93      	ldr	r3, [pc, #588]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	4990      	ldr	r1, [pc, #576]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232c:	e040      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d023      	beq.n	800237e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002336:	4b8c      	ldr	r3, [pc, #560]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a8b      	ldr	r2, [pc, #556]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe fa31 	bl	80007a8 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234a:	f7fe fa2d 	bl	80007a8 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e269      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	4b82      	ldr	r3, [pc, #520]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b7f      	ldr	r3, [pc, #508]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	497c      	ldr	r1, [pc, #496]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e018      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237e:	4b7a      	ldr	r3, [pc, #488]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a79      	ldr	r2, [pc, #484]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7fe fa0d 	bl	80007a8 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002392:	f7fe fa09 	bl	80007a8 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e245      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a4:	4b70      	ldr	r3, [pc, #448]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d03c      	beq.n	8002436 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01c      	beq.n	80023fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c4:	4b68      	ldr	r3, [pc, #416]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ca:	4a67      	ldr	r2, [pc, #412]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe f9e8 	bl	80007a8 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe f9e4 	bl	80007a8 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e220      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ee:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80023f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ef      	beq.n	80023dc <HAL_RCC_OscConfig+0x3ec>
 80023fc:	e01b      	b.n	8002436 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7fe f9cb 	bl	80007a8 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002416:	f7fe f9c7 	bl	80007a8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e203      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002428:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80a6 	beq.w	8002590 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002448:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	4b44      	ldr	r3, [pc, #272]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	4a43      	ldr	r2, [pc, #268]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	; 0x58
 8002460:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246c:	2301      	movs	r3, #1
 800246e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_RCC_OscConfig+0x57c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d118      	bne.n	80024ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x57c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_RCC_OscConfig+0x57c>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002486:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002488:	f7fe f98e 	bl	80007a8 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002490:	f7fe f98a 	bl	80007a8 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1c6      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a2:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_RCC_OscConfig+0x57c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4d8>
 80024b6:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	4a2a      	ldr	r2, [pc, #168]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c6:	e024      	b.n	8002512 <HAL_RCC_OscConfig+0x522>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d110      	bne.n	80024f2 <HAL_RCC_OscConfig+0x502>
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	4a24      	ldr	r2, [pc, #144]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f0:	e00f      	b.n	8002512 <HAL_RCC_OscConfig+0x522>
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800250a:	f023 0304 	bic.w	r3, r3, #4
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe f945 	bl	80007a8 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe f941 	bl	80007a8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e17b      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ed      	beq.n	8002522 <HAL_RCC_OscConfig+0x532>
 8002546:	e01a      	b.n	800257e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe f92e 	bl	80007a8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800254e:	e00f      	b.n	8002570 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7fe f92a 	bl	80007a8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d906      	bls.n	8002570 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e164      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	4ba8      	ldr	r3, [pc, #672]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1e8      	bne.n	8002550 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4ba3      	ldr	r3, [pc, #652]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	4aa2      	ldr	r2, [pc, #648]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d03c      	beq.n	8002616 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01c      	beq.n	80025de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025a4:	4b9b      	ldr	r3, [pc, #620]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025aa:	4a9a      	ldr	r2, [pc, #616]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe f8f8 	bl	80007a8 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025bc:	f7fe f8f4 	bl	80007a8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e130      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ce:	4b91      	ldr	r3, [pc, #580]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ef      	beq.n	80025bc <HAL_RCC_OscConfig+0x5cc>
 80025dc:	e01b      	b.n	8002616 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025de:	4b8d      	ldr	r3, [pc, #564]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e4:	4a8b      	ldr	r2, [pc, #556]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7fe f8db 	bl	80007a8 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f6:	f7fe f8d7 	bl	80007a8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e113      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002608:	4b82      	ldr	r3, [pc, #520]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800260a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ef      	bne.n	80025f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8107 	beq.w	800282e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	2b02      	cmp	r3, #2
 8002626:	f040 80cb 	bne.w	80027c0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800262a:	4b7a      	ldr	r3, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0203 	and.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	429a      	cmp	r2, r3
 800263c:	d12c      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	3b01      	subs	r3, #1
 800264a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d123      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d11b      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d113      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	3b01      	subs	r3, #1
 800267e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d109      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	3b01      	subs	r3, #1
 8002692:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d06d      	beq.n	8002774 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d068      	beq.n	8002770 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026aa:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0ba      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a55      	ldr	r2, [pc, #340]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026c6:	f7fe f86f 	bl	80007a8 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe f86b 	bl	80007a8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0a7      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e0:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ec:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	4b49      	ldr	r3, [pc, #292]	; (8002818 <HAL_RCC_OscConfig+0x828>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026fc:	3a01      	subs	r2, #1
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002706:	0212      	lsls	r2, r2, #8
 8002708:	4311      	orrs	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800270e:	0852      	lsrs	r2, r2, #1
 8002710:	3a01      	subs	r2, #1
 8002712:	0552      	lsls	r2, r2, #21
 8002714:	4311      	orrs	r1, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800271a:	0852      	lsrs	r2, r2, #1
 800271c:	3a01      	subs	r2, #1
 800271e:	0652      	lsls	r2, r2, #25
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002726:	06d2      	lsls	r2, r2, #27
 8002728:	430a      	orrs	r2, r1
 800272a:	493a      	ldr	r1, [pc, #232]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800272c:	4313      	orrs	r3, r2
 800272e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002730:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a37      	ldr	r2, [pc, #220]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a34      	ldr	r2, [pc, #208]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002748:	f7fe f82e 	bl	80007a8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe f82a 	bl	80007a8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e066      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276e:	e05e      	b.n	800282e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e05d      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d156      	bne.n	800282e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a23      	ldr	r2, [pc, #140]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002798:	f7fe f806 	bl	80007a8 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe f802 	bl	80007a8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e03e      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x7b0>
 80027be:	e036      	b.n	800282e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d031      	beq.n	800282a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027e4:	f023 0303 	bic.w	r3, r3, #3
 80027e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fd ffd5 	bl	80007a8 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	e00c      	b.n	800281c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002802:	f7fd ffd1 	bl	80007a8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d905      	bls.n	800281c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e00d      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
 8002814:	40021000 	.word	0x40021000
 8002818:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_OscConfig+0x848>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ec      	bne.n	8002802 <HAL_RCC_OscConfig+0x812>
 8002828:	e001      	b.n	800282e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e10f      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b89      	ldr	r3, [pc, #548]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b86      	ldr	r3, [pc, #536]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 020f 	bic.w	r2, r3, #15
 800286a:	4984      	ldr	r1, [pc, #528]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0f7      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8089 	beq.w	80029a4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d133      	bne.n	8002902 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	4b79      	ldr	r3, [pc, #484]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0e4      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028aa:	f000 f9d7 	bl	8002c5c <RCC_GetSysClockFreqFromPLLSource>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <HAL_RCC_ClockConfig+0x248>)
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d955      	bls.n	8002962 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028b6:	4b72      	ldr	r3, [pc, #456]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028c2:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ca:	4a6d      	ldr	r2, [pc, #436]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e044      	b.n	8002962 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d03e      	beq.n	8002962 <HAL_RCC_ClockConfig+0x126>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d13a      	bne.n	8002962 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f4:	4a62      	ldr	r2, [pc, #392]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e02f      	b.n	8002962 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d115      	bne.n	8002942 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0ac      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002922:	4b57      	ldr	r3, [pc, #348]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0a0      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002932:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e098      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002942:	f000 f8a7 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002946:	4602      	mov	r2, r0
 8002948:	4b4e      	ldr	r3, [pc, #312]	; (8002a84 <HAL_RCC_ClockConfig+0x248>)
 800294a:	429a      	cmp	r2, r3
 800294c:	d909      	bls.n	8002962 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002956:	4a4a      	ldr	r2, [pc, #296]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4944      	ldr	r1, [pc, #272]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fd ff18 	bl	80007a8 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7fd ff14 	bl	80007a8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e070      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4930      	ldr	r1, [pc, #192]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b80      	cmp	r3, #128	; 0x80
 80029c8:	d105      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4a2c      	ldr	r2, [pc, #176]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80029d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d210      	bcs.n	8002a06 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 020f 	bic.w	r2, r3, #15
 80029ec:	4923      	ldr	r1, [pc, #140]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e036      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	4918      	ldr	r1, [pc, #96]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4910      	ldr	r1, [pc, #64]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a44:	f000 f826 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a48:	4601      	mov	r1, r0
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_RCC_ClockConfig+0x24c>)
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	fa21 f303 	lsr.w	r3, r1, r3
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x250>)
 8002a62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x254>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fe4d 	bl	8000708 <HAL_InitTick>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	04c4b400 	.word	0x04c4b400
 8002a88:	080037ac 	.word	0x080037ac
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000004 	.word	0x20000004

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x104>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aac:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x104>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d121      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d11e      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ac8:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x104>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ad4:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e005      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ae4:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002af0:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d102      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e004      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d133      	bne.n	8002b8a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0xa4>
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0xaa>
 8002b36:	e005      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b3a:	617b      	str	r3, [r7, #20]
      break;
 8002b3c:	e005      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b40:	617b      	str	r3, [r7, #20]
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	617b      	str	r3, [r7, #20]
      break;
 8002b48:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	3301      	adds	r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	fb02 f203 	mul.w	r2, r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0e5b      	lsrs	r3, r3, #25
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3724      	adds	r7, #36	; 0x24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	080037bc 	.word	0x080037bc
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200

08002ba8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bb4:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bc0:	f7ff f952 	bl	8001e68 <HAL_PWREx_GetVoltageRange>
 8002bc4:	6178      	str	r0, [r7, #20]
 8002bc6:	e014      	b.n	8002bf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bc8:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002be0:	f7ff f942 	bl	8001e68 <HAL_PWREx_GetVoltageRange>
 8002be4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf8:	d10b      	bne.n	8002c12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d913      	bls.n	8002c28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2ba0      	cmp	r3, #160	; 0xa0
 8002c04:	d902      	bls.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c06:	2302      	movs	r3, #2
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	e00d      	b.n	8002c28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	e00a      	b.n	8002c28 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b7f      	cmp	r3, #127	; 0x7f
 8002c16:	d902      	bls.n	8002c1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c18:	2302      	movs	r3, #2
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	e004      	b.n	8002c28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b70      	cmp	r3, #112	; 0x70
 8002c22:	d101      	bne.n	8002c28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c24:	2301      	movs	r3, #1
 8002c26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 020f 	bic.w	r2, r3, #15
 8002c30:	4909      	ldr	r1, [pc, #36]	; (8002c58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d001      	beq.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40022000 	.word	0x40022000

08002c5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002c66:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d118      	bne.n	8002ca4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c7e:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e005      	b.n	8002c9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c8e:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d002      	beq.n	8002cba <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d003      	beq.n	8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002cb8:	e005      	b.n	8002cc6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002cbc:	613b      	str	r3, [r7, #16]
    break;
 8002cbe:	e005      	b.n	8002ccc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002cc2:	613b      	str	r3, [r7, #16]
    break;
 8002cc4:	e002      	b.n	8002ccc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	613b      	str	r3, [r7, #16]
    break;
 8002cca:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	fb02 f203 	mul.w	r2, r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	0e5b      	lsrs	r3, r3, #25
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d0c:	683b      	ldr	r3, [r7, #0]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	080037bc 	.word	0x080037bc
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	007a1200 	.word	0x007a1200

08002d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d34:	2300      	movs	r3, #0
 8002d36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d38:	2300      	movs	r3, #0
 8002d3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d03d      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d00b      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d804      	bhi.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d015      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d5c:	e01d      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002d5e:	2b60      	cmp	r3, #96	; 0x60
 8002d60:	d01e      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d62:	2b80      	cmp	r3, #128	; 0x80
 8002d64:	d01c      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d66:	e018      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d68:	4b86      	ldr	r3, [pc, #536]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a85      	ldr	r2, [pc, #532]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d74:	e015      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fafd 	bl	800337c <RCCEx_PLLSAI1_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d86:	e00c      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3320      	adds	r3, #32
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fbe4 	bl	800355c <RCCEx_PLLSAI2_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d98:	e003      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d9e:	e000      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002da8:	4b76      	ldr	r3, [pc, #472]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dae:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	4973      	ldr	r1, [pc, #460]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002dbe:	e001      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d042      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd8:	d00f      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dde:	d805      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d011      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de8:	d017      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002dea:	e01f      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df0:	d01f      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df6:	d01c      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002df8:	e018      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dfa:	4b62      	ldr	r3, [pc, #392]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	4a61      	ldr	r2, [pc, #388]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e06:	e015      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fab4 	bl	800337c <RCCEx_PLLSAI1_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e18:	e00c      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3320      	adds	r3, #32
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fb9b 	bl	800355c <RCCEx_PLLSAI2_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e2a:	e003      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	74fb      	strb	r3, [r7, #19]
      break;
 8002e30:	e000      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e3a:	4b52      	ldr	r3, [pc, #328]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	494e      	ldr	r1, [pc, #312]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e50:	e001      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 809f 	beq.w	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e68:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	4a40      	ldr	r2, [pc, #256]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8a:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a3a      	ldr	r2, [pc, #232]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea6:	f7fd fc7f 	bl	80007a8 <HAL_GetTick>
 8002eaa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eac:	e009      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7fd fc7b 	bl	80007a8 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d902      	bls.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	74fb      	strb	r3, [r7, #19]
        break;
 8002ec0:	e005      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0ef      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002ece:	7cfb      	ldrb	r3, [r7, #19]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d15b      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01f      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d019      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f1e:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d016      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fd fc3a 	bl	80007a8 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f36:	e00b      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fd fc36 	bl	80007a8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d902      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	74fb      	strb	r3, [r7, #19]
            break;
 8002f4e:	e006      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0ec      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f64:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	4903      	ldr	r1, [pc, #12]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f7c:	e008      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	74bb      	strb	r3, [r7, #18]
 8002f82:	e005      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f90:	7c7b      	ldrb	r3, [r7, #17]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f96:	4ba0      	ldr	r3, [pc, #640]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	4a9f      	ldr	r2, [pc, #636]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fae:	4b9a      	ldr	r3, [pc, #616]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	f023 0203 	bic.w	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	4996      	ldr	r1, [pc, #600]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fd0:	4b91      	ldr	r3, [pc, #580]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f023 020c 	bic.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	498e      	ldr	r1, [pc, #568]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ff2:	4b89      	ldr	r3, [pc, #548]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	4985      	ldr	r1, [pc, #532]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003014:	4b80      	ldr	r3, [pc, #512]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003022:	497d      	ldr	r1, [pc, #500]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003036:	4b78      	ldr	r3, [pc, #480]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003044:	4974      	ldr	r1, [pc, #464]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003058:	4b6f      	ldr	r3, [pc, #444]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003066:	496c      	ldr	r1, [pc, #432]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800307a:	4b67      	ldr	r3, [pc, #412]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003088:	4963      	ldr	r1, [pc, #396]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800309c:	4b5e      	ldr	r3, [pc, #376]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030aa:	495b      	ldr	r1, [pc, #364]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030be:	4b56      	ldr	r3, [pc, #344]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	4952      	ldr	r1, [pc, #328]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030e0:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	494a      	ldr	r1, [pc, #296]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003102:	4b45      	ldr	r3, [pc, #276]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	4941      	ldr	r1, [pc, #260]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003124:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003132:	4939      	ldr	r1, [pc, #228]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d028      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003146:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003154:	4930      	ldr	r1, [pc, #192]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003164:	d106      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003166:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	4a2b      	ldr	r2, [pc, #172]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003170:	60d3      	str	r3, [r2, #12]
 8003172:	e011      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800317c:	d10c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f8f9 	bl	800337c <RCCEx_PLLSAI1_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d04d      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ac:	d108      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80031ae:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031b4:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80031be:	e012      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80031c0:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031de:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ee:	d106      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a08      	ldr	r2, [pc, #32]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031fa:	60d3      	str	r3, [r2, #12]
 80031fc:	e020      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003206:	d109      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4a02      	ldr	r2, [pc, #8]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003212:	60d3      	str	r3, [r2, #12]
 8003214:	e014      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003224:	d10c      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3304      	adds	r3, #4
 800322a:	2101      	movs	r1, #1
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f8a5 	bl	800337c <RCCEx_PLLSAI1_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003236:	7cfb      	ldrb	r3, [r7, #19]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d028      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800324c:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800325a:	4947      	ldr	r1, [pc, #284]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800326a:	d106      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800326c:	4b42      	ldr	r3, [pc, #264]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a41      	ldr	r2, [pc, #260]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003276:	60d3      	str	r3, [r2, #12]
 8003278:	e011      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800327e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003282:	d10c      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	2101      	movs	r1, #1
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f876 	bl	800337c <RCCEx_PLLSAI1_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01e      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032aa:	4b33      	ldr	r3, [pc, #204]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ba:	492f      	ldr	r1, [pc, #188]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2102      	movs	r1, #2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f851 	bl	800337c <RCCEx_PLLSAI1_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032f4:	4b20      	ldr	r3, [pc, #128]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032fa:	f023 0204 	bic.w	r2, r3, #4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003304:	491c      	ldr	r1, [pc, #112]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800331a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800331e:	f023 0218 	bic.w	r2, r3, #24
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	4913      	ldr	r1, [pc, #76]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d017      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800333e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334c:	490a      	ldr	r1, [pc, #40]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800335a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800335e:	d105      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a04      	ldr	r2, [pc, #16]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800336a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800336c:	7cbb      	ldrb	r3, [r7, #18]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000

0800337c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003396:	4b6d      	ldr	r3, [pc, #436]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0203 	and.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d103      	bne.n	80033ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
       ||
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d13f      	bne.n	800342e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
 80033b2:	e03c      	b.n	800342e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d00c      	beq.n	80033d6 <RCCEx_PLLSAI1_Config+0x5a>
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d013      	beq.n	80033e8 <RCCEx_PLLSAI1_Config+0x6c>
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d120      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033c4:	4b61      	ldr	r3, [pc, #388]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11d      	bne.n	800340c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d4:	e01a      	b.n	800340c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033d6:	4b5d      	ldr	r3, [pc, #372]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e6:	e013      	b.n	8003410 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033e8:	4b58      	ldr	r3, [pc, #352]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10f      	bne.n	8003414 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033f4:	4b55      	ldr	r3, [pc, #340]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003404:	e006      	b.n	8003414 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      break;
 800340a:	e004      	b.n	8003416 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800340c:	bf00      	nop
 800340e:	e002      	b.n	8003416 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003410:	bf00      	nop
 8003412:	e000      	b.n	8003416 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003414:	bf00      	nop
    }

    if(status == HAL_OK)
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d108      	bne.n	800342e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800341c:	4b4b      	ldr	r3, [pc, #300]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f023 0203 	bic.w	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4948      	ldr	r1, [pc, #288]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 800342a:	4313      	orrs	r3, r2
 800342c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 8086 	bne.w	8003542 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003436:	4b45      	ldr	r3, [pc, #276]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a44      	ldr	r2, [pc, #272]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 800343c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003442:	f7fd f9b1 	bl	80007a8 <HAL_GetTick>
 8003446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003448:	e009      	b.n	800345e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800344a:	f7fd f9ad 	bl	80007a8 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d902      	bls.n	800345e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	73fb      	strb	r3, [r7, #15]
        break;
 800345c:	e005      	b.n	800346a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1ef      	bne.n	800344a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d168      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d113      	bne.n	800349e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003476:	4b35      	ldr	r3, [pc, #212]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	4b35      	ldr	r3, [pc, #212]	; (8003550 <RCCEx_PLLSAI1_Config+0x1d4>)
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	0211      	lsls	r1, r2, #8
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68d2      	ldr	r2, [r2, #12]
 8003488:	06d2      	lsls	r2, r2, #27
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6852      	ldr	r2, [r2, #4]
 8003490:	3a01      	subs	r2, #1
 8003492:	0112      	lsls	r2, r2, #4
 8003494:	430a      	orrs	r2, r1
 8003496:	492d      	ldr	r1, [pc, #180]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003498:	4313      	orrs	r3, r2
 800349a:	610b      	str	r3, [r1, #16]
 800349c:	e02d      	b.n	80034fa <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d115      	bne.n	80034d0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6892      	ldr	r2, [r2, #8]
 80034b0:	0211      	lsls	r1, r2, #8
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6912      	ldr	r2, [r2, #16]
 80034b6:	0852      	lsrs	r2, r2, #1
 80034b8:	3a01      	subs	r2, #1
 80034ba:	0552      	lsls	r2, r2, #21
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6852      	ldr	r2, [r2, #4]
 80034c2:	3a01      	subs	r2, #1
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	430a      	orrs	r2, r1
 80034c8:	4920      	ldr	r1, [pc, #128]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	610b      	str	r3, [r1, #16]
 80034ce:	e014      	b.n	80034fa <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	4b20      	ldr	r3, [pc, #128]	; (8003558 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6892      	ldr	r2, [r2, #8]
 80034dc:	0211      	lsls	r1, r2, #8
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6952      	ldr	r2, [r2, #20]
 80034e2:	0852      	lsrs	r2, r2, #1
 80034e4:	3a01      	subs	r2, #1
 80034e6:	0652      	lsls	r2, r2, #25
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6852      	ldr	r2, [r2, #4]
 80034ee:	3a01      	subs	r2, #1
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	430a      	orrs	r2, r1
 80034f4:	4915      	ldr	r1, [pc, #84]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a13      	ldr	r2, [pc, #76]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003504:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fd f94f 	bl	80007a8 <HAL_GetTick>
 800350a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800350c:	e009      	b.n	8003522 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800350e:	f7fd f94b 	bl	80007a8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d902      	bls.n	8003522 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	73fb      	strb	r3, [r7, #15]
          break;
 8003520:	e005      	b.n	800352e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ef      	beq.n	800350e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	4903      	ldr	r1, [pc, #12]	; (800354c <RCCEx_PLLSAI1_Config+0x1d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	07ff800f 	.word	0x07ff800f
 8003554:	ff9f800f 	.word	0xff9f800f
 8003558:	f9ff800f 	.word	0xf9ff800f

0800355c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800356a:	4b70      	ldr	r3, [pc, #448]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003576:	4b6d      	ldr	r3, [pc, #436]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0203 	and.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d103      	bne.n	800358e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
       ||
 800358a:	2b00      	cmp	r3, #0
 800358c:	d13f      	bne.n	800360e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
 8003592:	e03c      	b.n	800360e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d00c      	beq.n	80035b6 <RCCEx_PLLSAI2_Config+0x5a>
 800359c:	2b03      	cmp	r3, #3
 800359e:	d013      	beq.n	80035c8 <RCCEx_PLLSAI2_Config+0x6c>
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d120      	bne.n	80035e6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035a4:	4b61      	ldr	r3, [pc, #388]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d11d      	bne.n	80035ec <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b4:	e01a      	b.n	80035ec <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b6:	4b5d      	ldr	r3, [pc, #372]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d116      	bne.n	80035f0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c6:	e013      	b.n	80035f0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035c8:	4b58      	ldr	r3, [pc, #352]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10f      	bne.n	80035f4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035d4:	4b55      	ldr	r3, [pc, #340]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035e4:	e006      	b.n	80035f4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      break;
 80035ea:	e004      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80035ec:	bf00      	nop
 80035ee:	e002      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80035f4:	bf00      	nop
    }

    if(status == HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d108      	bne.n	800360e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f023 0203 	bic.w	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4948      	ldr	r1, [pc, #288]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 800360a:	4313      	orrs	r3, r2
 800360c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 8086 	bne.w	8003722 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003616:	4b45      	ldr	r3, [pc, #276]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a44      	ldr	r2, [pc, #272]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003622:	f7fd f8c1 	bl	80007a8 <HAL_GetTick>
 8003626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003628:	e009      	b.n	800363e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800362a:	f7fd f8bd 	bl	80007a8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d902      	bls.n	800363e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	73fb      	strb	r3, [r7, #15]
        break;
 800363c:	e005      	b.n	800364a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800363e:	4b3b      	ldr	r3, [pc, #236]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1ef      	bne.n	800362a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d168      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d113      	bne.n	800367e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003656:	4b35      	ldr	r3, [pc, #212]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	4b35      	ldr	r3, [pc, #212]	; (8003730 <RCCEx_PLLSAI2_Config+0x1d4>)
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6892      	ldr	r2, [r2, #8]
 8003662:	0211      	lsls	r1, r2, #8
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68d2      	ldr	r2, [r2, #12]
 8003668:	06d2      	lsls	r2, r2, #27
 800366a:	4311      	orrs	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6852      	ldr	r2, [r2, #4]
 8003670:	3a01      	subs	r2, #1
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	430a      	orrs	r2, r1
 8003676:	492d      	ldr	r1, [pc, #180]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	614b      	str	r3, [r1, #20]
 800367c:	e02d      	b.n	80036da <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d115      	bne.n	80036b0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003684:	4b29      	ldr	r3, [pc, #164]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368a:	4013      	ands	r3, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6892      	ldr	r2, [r2, #8]
 8003690:	0211      	lsls	r1, r2, #8
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6912      	ldr	r2, [r2, #16]
 8003696:	0852      	lsrs	r2, r2, #1
 8003698:	3a01      	subs	r2, #1
 800369a:	0552      	lsls	r2, r2, #21
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6852      	ldr	r2, [r2, #4]
 80036a2:	3a01      	subs	r2, #1
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	430a      	orrs	r2, r1
 80036a8:	4920      	ldr	r1, [pc, #128]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	614b      	str	r3, [r1, #20]
 80036ae:	e014      	b.n	80036da <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	4b20      	ldr	r3, [pc, #128]	; (8003738 <RCCEx_PLLSAI2_Config+0x1dc>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6892      	ldr	r2, [r2, #8]
 80036bc:	0211      	lsls	r1, r2, #8
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6952      	ldr	r2, [r2, #20]
 80036c2:	0852      	lsrs	r2, r2, #1
 80036c4:	3a01      	subs	r2, #1
 80036c6:	0652      	lsls	r2, r2, #25
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6852      	ldr	r2, [r2, #4]
 80036ce:	3a01      	subs	r2, #1
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	430a      	orrs	r2, r1
 80036d4:	4915      	ldr	r1, [pc, #84]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fd f85f 	bl	80007a8 <HAL_GetTick>
 80036ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ec:	e009      	b.n	8003702 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ee:	f7fd f85b 	bl	80007a8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d902      	bls.n	8003702 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	73fb      	strb	r3, [r7, #15]
          break;
 8003700:	e005      	b.n	800370e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ef      	beq.n	80036ee <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	4903      	ldr	r1, [pc, #12]	; (800372c <RCCEx_PLLSAI2_Config+0x1d0>)
 800371e:	4313      	orrs	r3, r2
 8003720:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	07ff800f 	.word	0x07ff800f
 8003734:	ff9f800f 	.word	0xff9f800f
 8003738:	f9ff800f 	.word	0xf9ff800f

0800373c <__libc_init_array>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4e0d      	ldr	r6, [pc, #52]	; (8003774 <__libc_init_array+0x38>)
 8003740:	4c0d      	ldr	r4, [pc, #52]	; (8003778 <__libc_init_array+0x3c>)
 8003742:	1ba4      	subs	r4, r4, r6
 8003744:	10a4      	asrs	r4, r4, #2
 8003746:	2500      	movs	r5, #0
 8003748:	42a5      	cmp	r5, r4
 800374a:	d109      	bne.n	8003760 <__libc_init_array+0x24>
 800374c:	4e0b      	ldr	r6, [pc, #44]	; (800377c <__libc_init_array+0x40>)
 800374e:	4c0c      	ldr	r4, [pc, #48]	; (8003780 <__libc_init_array+0x44>)
 8003750:	f000 f820 	bl	8003794 <_init>
 8003754:	1ba4      	subs	r4, r4, r6
 8003756:	10a4      	asrs	r4, r4, #2
 8003758:	2500      	movs	r5, #0
 800375a:	42a5      	cmp	r5, r4
 800375c:	d105      	bne.n	800376a <__libc_init_array+0x2e>
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003764:	4798      	blx	r3
 8003766:	3501      	adds	r5, #1
 8003768:	e7ee      	b.n	8003748 <__libc_init_array+0xc>
 800376a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800376e:	4798      	blx	r3
 8003770:	3501      	adds	r5, #1
 8003772:	e7f2      	b.n	800375a <__libc_init_array+0x1e>
 8003774:	080037ec 	.word	0x080037ec
 8003778:	080037ec 	.word	0x080037ec
 800377c:	080037ec 	.word	0x080037ec
 8003780:	080037f0 	.word	0x080037f0

08003784 <memset>:
 8003784:	4402      	add	r2, r0
 8003786:	4603      	mov	r3, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	d100      	bne.n	800378e <memset+0xa>
 800378c:	4770      	bx	lr
 800378e:	f803 1b01 	strb.w	r1, [r3], #1
 8003792:	e7f9      	b.n	8003788 <memset+0x4>

08003794 <_init>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr

080037a0 <_fini>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr
