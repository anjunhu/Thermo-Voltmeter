
Lab2_Group3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fcc  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041cc  080041cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080041cc  080041cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041cc  080041cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080041e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080041e0  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b0d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001569  00000000  00000000  00029b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029db7  00000000  00000000  0002c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000071b9  00000000  00000000  00055f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107533  00000000  00000000  0005d140  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024ac  00000000  00000000  001646f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004174 	.word	0x08004174

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08004174 	.word	0x08004174

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	0000      	movs	r0, r0
	...

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a44:	b090      	sub	sp, #64	; 0x40
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f000 fb35 	bl	80010b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f926 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 fa10 	bl	8000e74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a54:	f000 f9aa 	bl	8000dac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int mode = 1; // 1 is for refint, -1 is for temperature
 8000a58:	2301      	movs	r3, #1
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t fromADC;
  float measured_vref;
  int tempCelcius_int;
  float tempCelcius_flt;
  float tempCalV1 = (float) (*TEMPSENSOR_CAL1_ADDR);
 8000a5c:	4b84      	ldr	r3, [pc, #528]	; (8000c70 <main+0x230>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	ee07 3a90 	vmov	s15, r3
 8000a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float tempCalV2 = (float) (*TEMPSENSOR_CAL2_ADDR);
 8000a6c:	4b81      	ldr	r3, [pc, #516]	; (8000c74 <main+0x234>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a78:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float tempCoef = (float)(TEMPSENSOR_CAL2_TEMP-TEMPSENSOR_CAL1_TEMP)/ (tempCalV2 - tempCalV1);
 8000a7c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000a80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a88:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8000c78 <main+0x238>
 8000a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	615a      	str	r2, [r3, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)){ // RESET=0U
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	4874      	ldr	r0, [pc, #464]	; (8000c7c <main+0x23c>)
 8000aaa:	f001 fe83 	bl	80027b4 <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d112      	bne.n	8000ada <main+0x9a>
		  HAL_Delay(10);
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f000 fb73 	bl	80011a0 <HAL_Delay>
		  if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)){
 8000aba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abe:	486f      	ldr	r0, [pc, #444]	; (8000c7c <main+0x23c>)
 8000ac0:	f001 fe78 	bl	80027b4 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <main+0x9a>
		  		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	486c      	ldr	r0, [pc, #432]	; (8000c80 <main+0x240>)
 8000ad0:	f001 fea0 	bl	8002814 <HAL_GPIO_TogglePin>
		  		  mode *= -1;
 8000ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }
	  }

	  if (mode == -1){
 8000ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d104      	bne.n	8000aec <main+0xac>
		  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ae2:	4b68      	ldr	r3, [pc, #416]	; (8000c84 <main+0x244>)
 8000ae4:	607b      	str	r3, [r7, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	e003      	b.n	8000af4 <main+0xb4>
      }
	  else{
		  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000aec:	4b66      	ldr	r3, [pc, #408]	; (8000c88 <main+0x248>)
 8000aee:	607b      	str	r3, [r7, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000af0:	2307      	movs	r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]
	  }
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af4:	2306      	movs	r3, #6
 8000af6:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af8:	237f      	movs	r3, #127	; 0x7f
 8000afa:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000afc:	2304      	movs	r3, #4
 8000afe:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]

	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4860      	ldr	r0, [pc, #384]	; (8000c8c <main+0x24c>)
 8000b0a:	f000 ff87 	bl	8001a1c <HAL_ADC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <main+0xd8>
		  Error_Handler();
 8000b14:	f000 f9fe 	bl	8000f14 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc1);
 8000b18:	485c      	ldr	r0, [pc, #368]	; (8000c8c <main+0x24c>)
 8000b1a:	f000 fe87 	bl	800182c <HAL_ADC_Start>


	  if (mode == -1){
 8000b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b24:	d165      	bne.n	8000bf2 <main+0x1b2>
		  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000b26:	2164      	movs	r1, #100	; 0x64
 8000b28:	4858      	ldr	r0, [pc, #352]	; (8000c8c <main+0x24c>)
 8000b2a:	f000 fee2 	bl	80018f2 <HAL_ADC_PollForConversion>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1b7      	bne.n	8000aa4 <main+0x64>
	    	  // * (TS_DATA – TS_CAL1) + 30
	    	  tempCelcius_int = __HAL_ADC_CALC_TEMPERATURE( (int)measured_vref,
 8000b34:	4855      	ldr	r0, [pc, #340]	; (8000c8c <main+0x24c>)
 8000b36:	f000 ff64 	bl	8001a02 <HAL_ADC_GetValue>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b44:	ee17 2a90 	vmov	r2, s15
 8000b48:	fb02 f303 	mul.w	r3, r2, r3
 8000b4c:	4a50      	ldr	r2, [pc, #320]	; (8000c90 <main+0x250>)
 8000b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b52:	099b      	lsrs	r3, r3, #6
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <main+0x230>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	2264      	movs	r2, #100	; 0x64
 8000b5e:	fb02 f203 	mul.w	r2, r2, r3
 8000b62:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <main+0x234>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <main+0x230>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	1acb      	subs	r3, r1, r3
 8000b6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b72:	331e      	adds	r3, #30
 8000b74:	623b      	str	r3, [r7, #32]
	    			  HAL_ADC_GetValue(&hadc1), ADC_RESOLUTION_12B);
	    	  tempCelcius_flt = 30.0 + tempCoef *
 8000b76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b78:	f7ff fca6 	bl	80004c8 <__aeabi_f2d>
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	460d      	mov	r5, r1
	    			  ((float)HAL_ADC_GetValue(&hadc1)*measured_vref/3000.0 - tempCalV1);
 8000b80:	4842      	ldr	r0, [pc, #264]	; (8000c8c <main+0x24c>)
 8000b82:	f000 ff3e 	bl	8001a02 <HAL_ADC_GetValue>
 8000b86:	ee07 0a90 	vmov	s15, r0
 8000b8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b96:	ee17 0a90 	vmov	r0, s15
 8000b9a:	f7ff fc95 	bl	80004c8 <__aeabi_f2d>
 8000b9e:	a332      	add	r3, pc, #200	; (adr r3, 8000c68 <main+0x228>)
 8000ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba4:	f7ff fe12 	bl	80007cc <__aeabi_ddiv>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4690      	mov	r8, r2
 8000bae:	4699      	mov	r9, r3
 8000bb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000bb2:	f7ff fc89 	bl	80004c8 <__aeabi_f2d>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	4640      	mov	r0, r8
 8000bbc:	4649      	mov	r1, r9
 8000bbe:	f7ff fb23 	bl	8000208 <__aeabi_dsub>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	460b      	mov	r3, r1
	    	  tempCelcius_flt = 30.0 + tempCoef *
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	4629      	mov	r1, r5
 8000bca:	f7ff fcd5 	bl	8000578 <__aeabi_dmul>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <main+0x254>)
 8000bdc:	f7ff fb16 	bl	800020c <__adddf3>
 8000be0:	4603      	mov	r3, r0
 8000be2:	460c      	mov	r4, r1
 8000be4:	4618      	mov	r0, r3
 8000be6:	4621      	mov	r1, r4
 8000be8:	f7ff fed8 	bl	800099c <__aeabi_d2f>
 8000bec:	4603      	mov	r3, r0
 8000bee:	61fb      	str	r3, [r7, #28]
 8000bf0:	e758      	b.n	8000aa4 <main+0x64>
		  }
      }
	  else {
		  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000bf2:	2164      	movs	r1, #100	; 0x64
 8000bf4:	4825      	ldr	r0, [pc, #148]	; (8000c8c <main+0x24c>)
 8000bf6:	f000 fe7c 	bl	80018f2 <HAL_ADC_PollForConversion>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f47f af51 	bne.w	8000aa4 <main+0x64>
			  // VREF+ = VREF+_Charac  * VREFINT_CAL / VREFINT_DATA
			  VREFINT_CAL = *VREFINT_CAL_ADDR;
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <main+0x258>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	857b      	strh	r3, [r7, #42]	; 0x2a
			  fromADC = HAL_ADC_GetValue(&hadc1);
 8000c08:	4820      	ldr	r0, [pc, #128]	; (8000c8c <main+0x24c>)
 8000c0a:	f000 fefa 	bl	8001a02 <HAL_ADC_GetValue>
 8000c0e:	6278      	str	r0, [r7, #36]	; 0x24
			  measured_vref = 3000.0 * (float)VREFINT_CAL / (float)fromADC;
 8000c10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c1a:	ee17 0a90 	vmov	r0, s15
 8000c1e:	f7ff fc53 	bl	80004c8 <__aeabi_f2d>
 8000c22:	a311      	add	r3, pc, #68	; (adr r3, 8000c68 <main+0x228>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fca6 	bl	8000578 <__aeabi_dmul>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4625      	mov	r5, r4
 8000c32:	461c      	mov	r4, r3
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c3e:	ee17 0a90 	vmov	r0, s15
 8000c42:	f7ff fc41 	bl	80004c8 <__aeabi_f2d>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	f7ff fdbd 	bl	80007cc <__aeabi_ddiv>
 8000c52:	4603      	mov	r3, r0
 8000c54:	460c      	mov	r4, r1
 8000c56:	4618      	mov	r0, r3
 8000c58:	4621      	mov	r1, r4
 8000c5a:	f7ff fe9f 	bl	800099c <__aeabi_d2f>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)){ // RESET=0U
 8000c62:	e71f      	b.n	8000aa4 <main+0x64>
 8000c64:	f3af 8000 	nop.w
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	40a77000 	.word	0x40a77000
 8000c70:	1fff75a8 	.word	0x1fff75a8
 8000c74:	1fff75ca 	.word	0x1fff75ca
 8000c78:	42c80000 	.word	0x42c80000
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000400 	.word	0x48000400
 8000c84:	c7520000 	.word	0xc7520000
 8000c88:	80000001 	.word	0x80000001
 8000c8c:	20000028 	.word	0x20000028
 8000c90:	057619f1 	.word	0x057619f1
 8000c94:	403e0000 	.word	0x403e0000
 8000c98:	1fff75aa 	.word	0x1fff75aa

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0bc      	sub	sp, #240	; 0xf0
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ca6:	2244      	movs	r2, #68	; 0x44
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 fa5a 	bl	8004164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2294      	movs	r2, #148	; 0x94
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fa4c 	bl	8004164 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f001 fddb 	bl	8002888 <HAL_PWREx_ControlVoltageScaling>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000cd8:	f000 f91c 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cee:	2360      	movs	r3, #96	; 0x60
 8000cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d06:	233c      	movs	r3, #60	; 0x3c
 8000d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fe54 	bl	80029d0 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d2e:	f000 f8f1 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d54:	2105      	movs	r1, #5
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fa60 	bl	800321c <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d62:	f000 f8d7 	bl	8000f14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000d7c:	2318      	movs	r3, #24
 8000d7e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d90:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fcb9 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000da0:	f000 f8b8 	bl	8000f14 <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	37f0      	adds	r7, #240	; 0xf0
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
 8000dc0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000dc4:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <MX_ADC1_Init+0xc0>)
 8000dc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dda:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000e24:	f000 fbb8 	bl	8001598 <HAL_ADC_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000e2e:	f000 f871 	bl	8000f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;//ADC_CHANNEL_VREFINT; //
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e36:	2306      	movs	r3, #6
 8000e38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3e:	237f      	movs	r3, #127	; 0x7f
 8000e40:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e42:	2304      	movs	r3, #4
 8000e44:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_ADC1_Init+0xbc>)
 8000e50:	f000 fde4 	bl	8001a1c <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e5a:	f000 f85b 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000028 	.word	0x20000028
 8000e6c:	50040000 	.word	0x50040000
 8000e70:	c7520000 	.word	0xc7520000

08000e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <MX_GPIO_Init+0x94>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <MX_GPIO_Init+0x94>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MX_GPIO_Init+0x94>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_GPIO_Init+0x94>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <MX_GPIO_Init+0x94>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_GPIO_Init+0x94>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec0:	4812      	ldr	r0, [pc, #72]	; (8000f0c <MX_GPIO_Init+0x98>)
 8000ec2:	f001 fc8f 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000edc:	f001 fad8 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ee0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_GPIO_Init+0x98>)
 8000efa:	f001 fac9 	bl	8002490 <HAL_GPIO_Init>

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <Error_Handler+0x6>

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_ADC_MspInit+0x38>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10b      	bne.n	8000f8e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_ADC_MspInit+0x3c>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <HAL_ADC_MspInit+0x3c>)
 8000f7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_ADC_MspInit+0x3c>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	50040000 	.word	0x50040000
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f8b6 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <SystemInit+0x64>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <SystemInit+0x64>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <SystemInit+0x68>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a13      	ldr	r2, [pc, #76]	; (8001060 <SystemInit+0x68>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <SystemInit+0x68>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <SystemInit+0x68>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <SystemInit+0x68>)
 8001024:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001028:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800102c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <SystemInit+0x68>)
 8001030:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001034:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <SystemInit+0x68>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <SystemInit+0x68>)
 800103c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001040:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <SystemInit+0x68>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <SystemInit+0x64>)
 800104a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800104e:	609a      	str	r2, [r3, #8]
#endif
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00
 8001060:	40021000 	.word	0x40021000

08001064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001068:	f7ff ffc6 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800106c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800106e:	e003      	b.n	8001078 <LoopCopyDataInit>

08001070 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001072:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001074:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001076:	3104      	adds	r1, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800107c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800107e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001080:	d3f6      	bcc.n	8001070 <CopyDataInit>
	ldr	r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001084:	e002      	b.n	800108c <LoopFillZerobss>

08001086 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001086:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001088:	f842 3b04 	str.w	r3, [r2], #4

0800108c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <LoopForever+0x16>)
	cmp	r2, r3
 800108e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001090:	d3f9      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f003 f843 	bl	800411c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001096:	f7ff fcd3 	bl	8000a40 <main>

0800109a <LoopForever>:

LoopForever:
    b LoopForever
 800109a:	e7fe      	b.n	800109a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800109c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80010a0:	080041d4 	.word	0x080041d4
	ldr	r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010a8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010ac:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010b0:	20000094 	.word	0x20000094

080010b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_IRQHandler>

080010b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f001 f9b1 	bl	8002428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f80e 	bl	80010e8 <HAL_InitTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	e001      	b.n	80010dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d8:	f7ff ff20 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_InitTick+0x6c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d023      	beq.n	8001144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_InitTick+0x70>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x6c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f001 f9af 	bl	8002476 <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10f      	bne.n	800113e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d809      	bhi.n	8001138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f001 f987 	bl	800243e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_InitTick+0x74>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e007      	b.n	8001148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e004      	b.n	8001148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e001      	b.n	8001148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	20000000 	.word	0x20000000
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	20000090 	.word	0x20000090

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000090 	.word	0x20000090

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_Delay+0x40>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000008 	.word	0x20000008

080011e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	609a      	str	r2, [r3, #8]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3360      	adds	r3, #96	; 0x60
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <LL_ADC_SetOffset+0x44>)
 800126e:	4013      	ands	r3, r2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	4313      	orrs	r3, r2
 800127c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	03fff000 	.word	0x03fff000

08001294 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3360      	adds	r3, #96	; 0x60
 80012a2:	461a      	mov	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3360      	adds	r3, #96	; 0x60
 80012d0:	461a      	mov	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	615a      	str	r2, [r3, #20]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001342:	b480      	push	{r7}
 8001344:	b087      	sub	sp, #28
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3330      	adds	r3, #48	; 0x30
 8001352:	461a      	mov	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	4413      	add	r3, r2
 8001360:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f003 031f 	and.w	r3, r3, #31
 800136c:	211f      	movs	r1, #31
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	401a      	ands	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0e9b      	lsrs	r3, r3, #26
 800137a:	f003 011f 	and.w	r1, r3, #31
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	431a      	orrs	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800138e:	bf00      	nop
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800139a:	b480      	push	{r7}
 800139c:	b087      	sub	sp, #28
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3314      	adds	r3, #20
 80013aa:	461a      	mov	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	0e5b      	lsrs	r3, r3, #25
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	4413      	add	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	0d1b      	lsrs	r3, r3, #20
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	2107      	movs	r1, #7
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	0d1b      	lsrs	r3, r3, #20
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	431a      	orrs	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001408:	43db      	mvns	r3, r3
 800140a:	401a      	ands	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0318 	and.w	r3, r3, #24
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001414:	40d9      	lsrs	r1, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	400b      	ands	r3, r1
 800141a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141e:	431a      	orrs	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	0007ffff 	.word	0x0007ffff

08001438 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6093      	str	r3, [r2, #8]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800146c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001470:	d101      	bne.n	8001476 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014c0:	d101      	bne.n	80014c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <LL_ADC_IsEnabled+0x18>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <LL_ADC_IsEnabled+0x1a>
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001532:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001536:	f043 0204 	orr.w	r2, r3, #4
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b04      	cmp	r3, #4
 800155c:	d101      	bne.n	8001562 <LL_ADC_REG_IsConversionOngoing+0x18>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b08      	cmp	r3, #8
 8001582:	d101      	bne.n	8001588 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e12d      	b.n	800180e <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fccf 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff3f 	bl	800145c <LL_ADC_IsDeepPowerDownEnabled>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d004      	beq.n	80015ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff25 	bl	8001438 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff5a 	bl	80014ac <LL_ADC_IsInternalRegulatorEnabled>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d113      	bne.n	8001626 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff3e 	bl	8001484 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001608:	4b83      	ldr	r3, [pc, #524]	; (8001818 <HAL_ADC_Init+0x280>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	4a83      	ldr	r2, [pc, #524]	; (800181c <HAL_ADC_Init+0x284>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001618:	e002      	b.n	8001620 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3b01      	subs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f9      	bne.n	800161a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff3e 	bl	80014ac <LL_ADC_IsInternalRegulatorEnabled>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10d      	bne.n	8001652 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	f043 0210 	orr.w	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff77 	bl	800154a <LL_ADC_REG_IsConversionOngoing>
 800165c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 80c8 	bne.w	80017fc <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 80c4 	bne.w	80017fc <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800167c:	f043 0202 	orr.w	r2, r3, #2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff37 	bl	80014fc <LL_ADC_IsEnabled>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10b      	bne.n	80016ac <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001694:	4862      	ldr	r0, [pc, #392]	; (8001820 <HAL_ADC_Init+0x288>)
 8001696:	f7ff ff31 	bl	80014fc <LL_ADC_IsEnabled>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d105      	bne.n	80016ac <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4619      	mov	r1, r3
 80016a6:	485f      	ldr	r0, [pc, #380]	; (8001824 <HAL_ADC_Init+0x28c>)
 80016a8:	f7ff fd9c 	bl	80011e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7e5b      	ldrb	r3, [r3, #25]
 80016b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d106      	bne.n	80016e8 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	3b01      	subs	r3, #1
 80016e0:	045b      	lsls	r3, r3, #17
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d009      	beq.n	8001704 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_ADC_Init+0x290>)
 800170c:	4013      	ands	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	430b      	orrs	r3, r1
 8001716:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff14 	bl	800154a <LL_ADC_REG_IsConversionOngoing>
 8001722:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff21 	bl	8001570 <LL_ADC_INJ_IsConversionOngoing>
 800172e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d140      	bne.n	80017b8 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d13d      	bne.n	80017b8 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
 8001744:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001746:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800174e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800175e:	f023 0306 	bic.w	r3, r3, #6
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	430b      	orrs	r3, r1
 800176a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001772:	2b01      	cmp	r3, #1
 8001774:	d118      	bne.n	80017a8 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800178c:	4311      	orrs	r1, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001792:	4311      	orrs	r1, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001798:	430a      	orrs	r2, r1
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	611a      	str	r2, [r3, #16]
 80017a6:	e007      	b.n	80017b8 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d10c      	bne.n	80017da <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f023 010f 	bic.w	r1, r3, #15
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
 80017d8:	e007      	b.n	80017ea <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 020f 	bic.w	r2, r2, #15
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	659a      	str	r2, [r3, #88]	; 0x58
 80017fa:	e007      	b.n	800180c <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	f043 0210 	orr.w	r2, r3, #16
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800180c:	7ffb      	ldrb	r3, [r7, #31]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000000 	.word	0x20000000
 800181c:	053e2d63 	.word	0x053e2d63
 8001820:	50040000 	.word	0x50040000
 8001824:	50040300 	.word	0x50040300
 8001828:	fff0c007 	.word	0xfff0c007

0800182c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fe86 	bl	800154a <LL_ADC_REG_IsConversionOngoing>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d14f      	bne.n	80018e4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Start+0x26>
 800184e:	2302      	movs	r3, #2
 8001850:	e04b      	b.n	80018ea <HAL_ADC_Start+0xbe>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fcd8 	bl	8002210 <ADC_Enable>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d137      	bne.n	80018da <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800188a:	d106      	bne.n	800189a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	f023 0206 	bic.w	r2, r3, #6
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	65da      	str	r2, [r3, #92]	; 0x5c
 8001898:	e002      	b.n	80018a0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	221c      	movs	r2, #28
 80018a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fe25 	bl	8001522 <LL_ADC_REG_StartConversion>
 80018d8:	e006      	b.n	80018e8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80018e2:	e001      	b.n	80018e8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018e4:	2302      	movs	r3, #2
 80018e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d102      	bne.n	800190a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001904:	2308      	movs	r3, #8
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e010      	b.n	800192c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	f043 0220 	orr.w	r2, r3, #32
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e068      	b.n	80019fa <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001928:	2304      	movs	r3, #4
 800192a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800192c:	f7ff fc2c 	bl	8001188 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001932:	e01a      	b.n	800196a <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193a:	d016      	beq.n	800196a <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800193c:	f7ff fc24 	bl	8001188 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d302      	bcc.n	8001952 <HAL_ADC_PollForConversion+0x60>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10b      	bne.n	800196a <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	f043 0204 	orr.w	r2, r3, #4
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e047      	b.n	80019fa <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0dd      	beq.n	8001934 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fcc7 	bl	800131c <LL_ADC_REG_IsTriggerSourceSWStart>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01c      	beq.n	80019ce <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e5b      	ldrb	r3, [r3, #25]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d118      	bne.n	80019ce <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d111      	bne.n	80019ce <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d104      	bne.n	80019e6 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2208      	movs	r2, #8
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e008      	b.n	80019f8 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	220c      	movs	r2, #12
 80019f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0b6      	sub	sp, #216	; 0xd8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x22>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e3d4      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x7cc>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fd7d 	bl	800154a <LL_ADC_REG_IsConversionOngoing>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 83b9 	bne.w	80021ca <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d824      	bhi.n	8001aaa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	3b02      	subs	r3, #2
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d81b      	bhi.n	8001aa2 <HAL_ADC_ConfigChannel+0x86>
 8001a6a:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <HAL_ADC_ConfigChannel+0x54>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001a81 	.word	0x08001a81
 8001a74:	08001a89 	.word	0x08001a89
 8001a78:	08001a91 	.word	0x08001a91
 8001a7c:	08001a99 	.word	0x08001a99
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	220c      	movs	r2, #12
 8001a84:	605a      	str	r2, [r3, #4]
          break;
 8001a86:	e011      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2212      	movs	r2, #18
 8001a8c:	605a      	str	r2, [r3, #4]
          break;
 8001a8e:	e00d      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2218      	movs	r2, #24
 8001a94:	605a      	str	r2, [r3, #4]
          break;
 8001a96:	e009      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9e:	605a      	str	r2, [r3, #4]
          break;
 8001aa0:	e004      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2206      	movs	r2, #6
 8001aa6:	605a      	str	r2, [r3, #4]
          break;
 8001aa8:	e000      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001aaa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	f7ff fc42 	bl	8001342 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fd41 	bl	800154a <LL_ADC_REG_IsConversionOngoing>
 8001ac8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fd4d 	bl	8001570 <LL_ADC_INJ_IsConversionOngoing>
 8001ad6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 81c1 	bne.w	8001e66 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 81bc 	bne.w	8001e66 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001af6:	d10f      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff fc49 	bl	800139a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fbf0 	bl	80012f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b16:	e00e      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6819      	ldr	r1, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	461a      	mov	r2, r3
 8001b26:	f7ff fc38 	bl	800139a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fbe0 	bl	80012f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	08db      	lsrs	r3, r3, #3
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d00a      	beq.n	8001b6e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6919      	ldr	r1, [r3, #16]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b68:	f7ff fb70 	bl	800124c <LL_ADC_SetOffset>
 8001b6c:	e17b      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fb8d 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10a      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x17e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fb82 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	0e9b      	lsrs	r3, r3, #26
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	e01e      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1bc>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fb77 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e004      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1d4>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	e018      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x206>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e004      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001c18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d106      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fb46 	bl	80012c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fb2a 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x244>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fb1f 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	0e9b      	lsrs	r3, r3, #26
 8001c5a:	f003 021f 	and.w	r2, r3, #31
 8001c5e:	e01e      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x282>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fb14 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e004      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x29a>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	e018      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x2cc>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e004      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d106      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fae3 	bl	80012c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2102      	movs	r1, #2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fac7 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10a      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x30a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2102      	movs	r1, #2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fabc 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	e01e      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x348>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fab1 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001d54:	2320      	movs	r3, #32
 8001d56:	e004      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x360>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	e016      	b.n	8001daa <HAL_ADC_ConfigChannel+0x38e>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	e004      	b.n	8001daa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d106      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2200      	movs	r2, #0
 8001db4:	2102      	movs	r1, #2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fa82 	bl	80012c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fa66 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10a      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x3cc>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fa5b 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	f003 021f 	and.w	r2, r3, #31
 8001de6:	e017      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x3fc>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2103      	movs	r1, #3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fa50 	bl	8001294 <LL_ADC_GetOffsetChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e02:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	e003      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x414>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e9b      	lsrs	r3, r3, #26
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	e011      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x438>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	e003      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d106      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2103      	movs	r1, #3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fa2d 	bl	80012c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fb46 	bl	80014fc <LL_ADC_IsEnabled>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 8140 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6819      	ldr	r1, [r3, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f7ff fab3 	bl	80013f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	4a8f      	ldr	r2, [pc, #572]	; (80020cc <HAL_ADC_ConfigChannel+0x6b0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	f040 8131 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10b      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x4a2>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2b09      	cmp	r3, #9
 8001eb4:	bf94      	ite	ls
 8001eb6:	2301      	movls	r3, #1
 8001eb8:	2300      	movhi	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	e019      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x4d6>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ece:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e003      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	bf94      	ite	ls
 8001eec:	2301      	movls	r3, #1
 8001eee:	2300      	movhi	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d079      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x4f6>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	3301      	adds	r3, #1
 8001f0a:	069b      	lsls	r3, r3, #26
 8001f0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f10:	e015      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x522>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f22:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	e003      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	069b      	lsls	r3, r3, #26
 8001f3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x542>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	3301      	adds	r3, #1
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	e017      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x572>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001f76:	2320      	movs	r3, #32
 8001f78:	e003      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	ea42 0103 	orr.w	r1, r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x598>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	0e9b      	lsrs	r3, r3, #26
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	f003 021f 	and.w	r2, r3, #31
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	051b      	lsls	r3, r3, #20
 8001fb2:	e018      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x5ca>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	e003      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f003 021f 	and.w	r2, r3, #31
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	e081      	b.n	80020ee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d107      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x5ea>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0e9b      	lsrs	r3, r3, #26
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	069b      	lsls	r3, r3, #26
 8002000:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002004:	e015      	b.n	8002032 <HAL_ADC_ConfigChannel+0x616>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800201e:	2320      	movs	r3, #32
 8002020:	e003      	b.n	800202a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	069b      	lsls	r3, r3, #26
 800202e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x636>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0e9b      	lsrs	r3, r3, #26
 8002044:	3301      	adds	r3, #1
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	e017      	b.n	8002082 <HAL_ADC_ConfigChannel+0x666>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	61fb      	str	r3, [r7, #28]
  return result;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e003      	b.n	8002076 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	3301      	adds	r3, #1
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	ea42 0103 	orr.w	r1, r2, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10d      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x692>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0e9b      	lsrs	r3, r3, #26
 8002098:	3301      	adds	r3, #1
 800209a:	f003 021f 	and.w	r2, r3, #31
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	3b1e      	subs	r3, #30
 80020a6:	051b      	lsls	r3, r3, #20
 80020a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ac:	e01e      	b.n	80020ec <HAL_ADC_ConfigChannel+0x6d0>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	613b      	str	r3, [r7, #16]
  return result;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d104      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80020c6:	2320      	movs	r3, #32
 80020c8:	e006      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x6bc>
 80020ca:	bf00      	nop
 80020cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	f003 021f 	and.w	r2, r3, #31
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	3b1e      	subs	r3, #30
 80020e6:	051b      	lsls	r3, r3, #20
 80020e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	430b      	orrs	r3, r1
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	6892      	ldr	r2, [r2, #8]
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7ff f951 	bl	800139a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <HAL_ADC_ConfigChannel+0x7d4>)
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d06b      	beq.n	80021dc <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002104:	483b      	ldr	r0, [pc, #236]	; (80021f4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002106:	f7ff f893 	bl	8001230 <LL_ADC_GetCommonPathInternalCh>
 800210a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a39      	ldr	r2, [pc, #228]	; (80021f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d126      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800211c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d120      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a34      	ldr	r2, [pc, #208]	; (80021fc <HAL_ADC_ConfigChannel+0x7e0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d156      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800212e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002132:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002136:	4619      	mov	r1, r3
 8002138:	482e      	ldr	r0, [pc, #184]	; (80021f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800213a:	f7ff f866 	bl	800120a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_ADC_ConfigChannel+0x7e4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_ADC_ConfigChannel+0x7e8>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	099a      	lsrs	r2, r3, #6
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002156:	e002      	b.n	800215e <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3b01      	subs	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f9      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002164:	e03a      	b.n	80021dc <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_ADC_ConfigChannel+0x7ec>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d113      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x77c>
 8002170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <HAL_ADC_ConfigChannel+0x7e0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d12a      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	4619      	mov	r1, r3
 8002190:	4818      	ldr	r0, [pc, #96]	; (80021f4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002192:	f7ff f83a 	bl	800120a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002196:	e021      	b.n	80021dc <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1b      	ldr	r2, [pc, #108]	; (800220c <HAL_ADC_ConfigChannel+0x7f0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d11c      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d116      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_ADC_ConfigChannel+0x7e0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c0:	4619      	mov	r1, r3
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <HAL_ADC_ConfigChannel+0x7d8>)
 80021c4:	f7ff f821 	bl	800120a <LL_ADC_SetCommonPathInternalCh>
 80021c8:	e008      	b.n	80021dc <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f043 0220 	orr.w	r2, r3, #32
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80021e4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	37d8      	adds	r7, #216	; 0xd8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	80080000 	.word	0x80080000
 80021f4:	50040300 	.word	0x50040300
 80021f8:	c7520000 	.word	0xc7520000
 80021fc:	50040000 	.word	0x50040000
 8002200:	20000000 	.word	0x20000000
 8002204:	053e2d63 	.word	0x053e2d63
 8002208:	cb840000 	.word	0xcb840000
 800220c:	80000001 	.word	0x80000001

08002210 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff f96d 	bl	80014fc <LL_ADC_IsEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d146      	bne.n	80022b6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <ADC_Enable+0xb0>)
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e032      	b.n	80022b8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f93c 	bl	80014d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800225c:	f7fe ff94 	bl	8001188 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002262:	e021      	b.n	80022a8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff f947 	bl	80014fc <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d104      	bne.n	800227e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f92b 	bl	80014d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800227e:	f7fe ff83 	bl	8001188 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d90d      	bls.n	80022a8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f043 0210 	orr.w	r2, r3, #16
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e007      	b.n	80022b8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d1d6      	bne.n	8002264 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	8000003f 	.word	0x8000003f

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	; (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f4:	d301      	bcc.n	80023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <SysTick_Config+0x40>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002402:	210f      	movs	r1, #15
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f7ff ff8e 	bl	8002328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <SysTick_Config+0x40>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SysTick_Config+0x40>)
 8002414:	2207      	movs	r2, #7
 8002416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	e000e010 	.word	0xe000e010

08002428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff47 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002450:	f7ff ff5c 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7ff ff8e 	bl	800237c <NVIC_EncodePriority>
 8002460:	4602      	mov	r2, r0
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff5d 	bl	8002328 <__NVIC_SetPriority>
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffb0 	bl	80023e4 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249e:	e166      	b.n	800276e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8158 	beq.w	8002768 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d00b      	beq.n	80024d8 <HAL_GPIO_Init+0x48>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d007      	beq.n	80024d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024cc:	2b11      	cmp	r3, #17
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b12      	cmp	r3, #18
 80024d6:	d130      	bne.n	800253a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250e:	2201      	movs	r2, #1
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0201 	and.w	r2, r3, #1
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0xea>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b12      	cmp	r3, #18
 8002578:	d123      	bne.n	80025c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	6939      	ldr	r1, [r7, #16]
 80025be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0203 	and.w	r2, r3, #3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80b2 	beq.w	8002768 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002604:	4b61      	ldr	r3, [pc, #388]	; (800278c <HAL_GPIO_Init+0x2fc>)
 8002606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002608:	4a60      	ldr	r2, [pc, #384]	; (800278c <HAL_GPIO_Init+0x2fc>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6613      	str	r3, [r2, #96]	; 0x60
 8002610:	4b5e      	ldr	r3, [pc, #376]	; (800278c <HAL_GPIO_Init+0x2fc>)
 8002612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800261c:	4a5c      	ldr	r2, [pc, #368]	; (8002790 <HAL_GPIO_Init+0x300>)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002646:	d02b      	beq.n	80026a0 <HAL_GPIO_Init+0x210>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_GPIO_Init+0x304>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d025      	beq.n	800269c <HAL_GPIO_Init+0x20c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a51      	ldr	r2, [pc, #324]	; (8002798 <HAL_GPIO_Init+0x308>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d01f      	beq.n	8002698 <HAL_GPIO_Init+0x208>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_GPIO_Init+0x30c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d019      	beq.n	8002694 <HAL_GPIO_Init+0x204>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <HAL_GPIO_Init+0x310>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_GPIO_Init+0x200>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_GPIO_Init+0x314>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00d      	beq.n	800268c <HAL_GPIO_Init+0x1fc>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_GPIO_Init+0x318>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <HAL_GPIO_Init+0x1f8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x31c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_GPIO_Init+0x1f4>
 8002680:	2307      	movs	r3, #7
 8002682:	e00e      	b.n	80026a2 <HAL_GPIO_Init+0x212>
 8002684:	2308      	movs	r3, #8
 8002686:	e00c      	b.n	80026a2 <HAL_GPIO_Init+0x212>
 8002688:	2306      	movs	r3, #6
 800268a:	e00a      	b.n	80026a2 <HAL_GPIO_Init+0x212>
 800268c:	2305      	movs	r3, #5
 800268e:	e008      	b.n	80026a2 <HAL_GPIO_Init+0x212>
 8002690:	2304      	movs	r3, #4
 8002692:	e006      	b.n	80026a2 <HAL_GPIO_Init+0x212>
 8002694:	2303      	movs	r3, #3
 8002696:	e004      	b.n	80026a2 <HAL_GPIO_Init+0x212>
 8002698:	2302      	movs	r3, #2
 800269a:	e002      	b.n	80026a2 <HAL_GPIO_Init+0x212>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_GPIO_Init+0x212>
 80026a0:	2300      	movs	r3, #0
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	f002 0203 	and.w	r2, r2, #3
 80026a8:	0092      	lsls	r2, r2, #2
 80026aa:	4093      	lsls	r3, r2
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b2:	4937      	ldr	r1, [pc, #220]	; (8002790 <HAL_GPIO_Init+0x300>)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026c0:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_GPIO_Init+0x320>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026e4:	4a32      	ldr	r2, [pc, #200]	; (80027b0 <HAL_GPIO_Init+0x320>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026ea:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <HAL_GPIO_Init+0x320>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800270e:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <HAL_GPIO_Init+0x320>)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002714:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_GPIO_Init+0x320>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002738:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_GPIO_Init+0x320>)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_GPIO_Init+0x320>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002762:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <HAL_GPIO_Init+0x320>)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f ae91 	bne.w	80024a0 <HAL_GPIO_Init+0x10>
  }
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	48000c00 	.word	0x48000c00
 80027a0:	48001000 	.word	0x48001000
 80027a4:	48001400 	.word	0x48001400
 80027a8:	48001800 	.word	0x48001800
 80027ac:	48001c00 	.word	0x48001c00
 80027b0:	40010400 	.word	0x40010400

080027b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e001      	b.n	80027d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002800:	e002      	b.n	8002808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	041a      	lsls	r2, r3, #16
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43d9      	mvns	r1, r3
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	400b      	ands	r3, r1
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_PWREx_GetVoltageRange+0x3c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002858:	d102      	bne.n	8002860 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800285a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285e:	e00b      	b.n	8002878 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286e:	d102      	bne.n	8002876 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002874:	e000      	b.n	8002878 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002876:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40007000 	.word	0x40007000

08002888 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d141      	bne.n	800291a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002896:	4b4b      	ldr	r3, [pc, #300]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a2:	d131      	bne.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028aa:	4a46      	ldr	r2, [pc, #280]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028bc:	4a41      	ldr	r2, [pc, #260]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80028c4:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2232      	movs	r2, #50	; 0x32
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	4a3f      	ldr	r2, [pc, #252]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	0c9b      	lsrs	r3, r3, #18
 80028d6:	3301      	adds	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028da:	e002      	b.n	80028e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3b01      	subs	r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e2:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ee:	d102      	bne.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f2      	bne.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028f6:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002902:	d158      	bne.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e057      	b.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002908:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290e:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002914:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002918:	e04d      	b.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002920:	d141      	bne.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800292a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292e:	d131      	bne.n	8002994 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002936:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002948:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800294e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2232      	movs	r2, #50	; 0x32
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	0c9b      	lsrs	r3, r3, #18
 8002962:	3301      	adds	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002966:	e002      	b.n	800296e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3b01      	subs	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297a:	d102      	bne.n	8002982 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f2      	bne.n	8002968 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298e:	d112      	bne.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e011      	b.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029a4:	e007      	b.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40007000 	.word	0x40007000
 80029c8:	20000000 	.word	0x20000000
 80029cc:	431bde83 	.word	0x431bde83

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	f000 bc16 	b.w	8003210 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e4:	4ba0      	ldr	r3, [pc, #640]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ee:	4b9e      	ldr	r3, [pc, #632]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80e4 	beq.w	8002bce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4c>
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	f040 808b 	bne.w	8002b2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	f040 8087 	bne.w	8002b2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a1c:	4b92      	ldr	r3, [pc, #584]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_OscConfig+0x64>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e3ed      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1a      	ldr	r2, [r3, #32]
 8002a38:	4b8b      	ldr	r3, [pc, #556]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_RCC_OscConfig+0x7e>
 8002a44:	4b88      	ldr	r3, [pc, #544]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4c:	e005      	b.n	8002a5a <HAL_RCC_OscConfig+0x8a>
 8002a4e:	4b86      	ldr	r3, [pc, #536]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d223      	bcs.n	8002aa6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fd90 	bl	8003588 <RCC_SetFlashLatencyFromMSIRange>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e3ce      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a72:	4b7d      	ldr	r3, [pc, #500]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7c      	ldr	r2, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002a78:	f043 0308 	orr.w	r3, r3, #8
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b7a      	ldr	r3, [pc, #488]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4977      	ldr	r1, [pc, #476]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a90:	4b75      	ldr	r3, [pc, #468]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	4972      	ldr	r1, [pc, #456]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
 8002aa4:	e025      	b.n	8002af2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa6:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6f      	ldr	r2, [pc, #444]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002aac:	f043 0308 	orr.w	r3, r3, #8
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	496a      	ldr	r1, [pc, #424]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac4:	4b68      	ldr	r3, [pc, #416]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	4965      	ldr	r1, [pc, #404]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fd50 	bl	8003588 <RCC_SetFlashLatencyFromMSIRange>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e38e      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af2:	f000 fcbf 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8002af6:	4601      	mov	r1, r0
 8002af8:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	4a5a      	ldr	r2, [pc, #360]	; (8002c6c <HAL_RCC_OscConfig+0x29c>)
 8002b04:	5cd3      	ldrb	r3, [r2, r3]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b0e:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x2a0>)
 8002b10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b12:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <HAL_RCC_OscConfig+0x2a4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fae6 	bl	80010e8 <HAL_InitTick>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d052      	beq.n	8002bcc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	e372      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d032      	beq.n	8002b98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b32:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a4c      	ldr	r2, [pc, #304]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fb23 	bl	8001188 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b46:	f7fe fb1f 	bl	8001188 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e35b      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b58:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b64:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a3f      	ldr	r2, [pc, #252]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b6a:	f043 0308 	orr.w	r3, r3, #8
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	493a      	ldr	r1, [pc, #232]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	4935      	ldr	r1, [pc, #212]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
 8002b96:	e01a      	b.n	8002bce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b98:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a32      	ldr	r2, [pc, #200]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe faf0 	bl	8001188 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bac:	f7fe faec 	bl	8001188 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e328      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x1dc>
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d073      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_OscConfig+0x21c>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d10e      	bne.n	8002c04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d10b      	bne.n	8002c04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d063      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x2f0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d15f      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e305      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCC_OscConfig+0x24c>
 8002c0e:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0x288>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x270>
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a0f      	ldr	r2, [pc, #60]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0x288>
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <HAL_RCC_OscConfig+0x298>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fa92 	bl	8001188 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c66:	e010      	b.n	8002c8a <HAL_RCC_OscConfig+0x2ba>
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	0800418c 	.word	0x0800418c
 8002c70:	20000000 	.word	0x20000000
 8002c74:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fa86 	bl	8001188 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e2c2      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8a:	4baf      	ldr	r3, [pc, #700]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x2a8>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fa76 	bl	8001188 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fa72 	bl	8001188 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e2ae      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb2:	4ba5      	ldr	r3, [pc, #660]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2d0>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d060      	beq.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x310>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d119      	bne.n	8002d0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d116      	bne.n	8002d0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce0:	4b99      	ldr	r3, [pc, #612]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x328>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e28b      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	4990      	ldr	r1, [pc, #576]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d0c:	e040      	b.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d16:	4b8c      	ldr	r3, [pc, #560]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a8b      	ldr	r2, [pc, #556]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe fa31 	bl	8001188 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fa2d 	bl	8001188 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e269      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3c:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b7f      	ldr	r3, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	497c      	ldr	r1, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	e018      	b.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a79      	ldr	r2, [pc, #484]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fa0d 	bl	8001188 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fe fa09 	bl	8001188 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e245      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d84:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d03c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01c      	beq.n	8002dde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da4:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002daa:	4a67      	ldr	r2, [pc, #412]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7fe f9e8 	bl	8001188 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe f9e4 	bl	8001188 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e220      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dce:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ef      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3ec>
 8002ddc:	e01b      	b.n	8002e16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dde:	4b5a      	ldr	r3, [pc, #360]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe f9cb 	bl	8001188 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df6:	f7fe f9c7 	bl	8001188 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e203      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e08:	4b4f      	ldr	r3, [pc, #316]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ef      	bne.n	8002df6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a6 	beq.w	8002f70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e28:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10d      	bne.n	8002e50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	4a43      	ldr	r2, [pc, #268]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e40:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	4b3e      	ldr	r3, [pc, #248]	; (8002f4c <HAL_RCC_OscConfig+0x57c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d118      	bne.n	8002e8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e5c:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <HAL_RCC_OscConfig+0x57c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a3a      	ldr	r2, [pc, #232]	; (8002f4c <HAL_RCC_OscConfig+0x57c>)
 8002e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e68:	f7fe f98e 	bl	8001188 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e70:	f7fe f98a 	bl	8001188 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e1c6      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e82:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <HAL_RCC_OscConfig+0x57c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4d8>
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	4a2a      	ldr	r2, [pc, #168]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea6:	e024      	b.n	8002ef2 <HAL_RCC_OscConfig+0x522>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d110      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x502>
 8002eb0:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec0:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed0:	e00f      	b.n	8002ef2 <HAL_RCC_OscConfig+0x522>
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	4a1b      	ldr	r2, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee2:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002eea:	f023 0304 	bic.w	r3, r3, #4
 8002eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fe f945 	bl	8001188 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe f941 	bl	8001188 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e17b      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x578>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0ed      	beq.n	8002f02 <HAL_RCC_OscConfig+0x532>
 8002f26:	e01a      	b.n	8002f5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7fe f92e 	bl	8001188 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f2e:	e00f      	b.n	8002f50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fe f92a 	bl	8001188 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d906      	bls.n	8002f50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e164      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f50:	4ba8      	ldr	r3, [pc, #672]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e8      	bne.n	8002f30 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5e:	7ffb      	ldrb	r3, [r7, #31]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4ba3      	ldr	r3, [pc, #652]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	4aa2      	ldr	r2, [pc, #648]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d03c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01c      	beq.n	8002fbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f84:	4b9b      	ldr	r3, [pc, #620]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8002f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f8a:	4a9a      	ldr	r2, [pc, #616]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe f8f8 	bl	8001188 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f9c:	f7fe f8f4 	bl	8001188 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e130      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fae:	4b91      	ldr	r3, [pc, #580]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8002fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCC_OscConfig+0x5cc>
 8002fbc:	e01b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fbe:	4b8d      	ldr	r3, [pc, #564]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8002fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc4:	4a8b      	ldr	r2, [pc, #556]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7fe f8db 	bl	8001188 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd6:	f7fe f8d7 	bl	8001188 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e113      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe8:	4b82      	ldr	r3, [pc, #520]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8002fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ef      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8107 	beq.w	800320e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	2b02      	cmp	r3, #2
 8003006:	f040 80cb 	bne.w	80031a0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800300a:	4b7a      	ldr	r3, [pc, #488]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 0203 	and.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	429a      	cmp	r2, r3
 800301c:	d12c      	bne.n	8003078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	3b01      	subs	r3, #1
 800302a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d123      	bne.n	8003078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d11b      	bne.n	8003078 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d113      	bne.n	8003078 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	3b01      	subs	r3, #1
 800305e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d109      	bne.n	8003078 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	3b01      	subs	r3, #1
 8003072:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d06d      	beq.n	8003154 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b0c      	cmp	r3, #12
 800307c:	d068      	beq.n	8003150 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800307e:	4b5d      	ldr	r3, [pc, #372]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d105      	bne.n	8003096 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800308a:	4b5a      	ldr	r3, [pc, #360]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0ba      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800309a:	4b56      	ldr	r3, [pc, #344]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a55      	ldr	r2, [pc, #340]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80030a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030a6:	f7fe f86f 	bl	8001188 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe f86b 	bl	8001188 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0a7      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030cc:	4b49      	ldr	r3, [pc, #292]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	4b49      	ldr	r3, [pc, #292]	; (80031f8 <HAL_RCC_OscConfig+0x828>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030dc:	3a01      	subs	r2, #1
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	4311      	orrs	r1, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e6:	0212      	lsls	r2, r2, #8
 80030e8:	4311      	orrs	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ee:	0852      	lsrs	r2, r2, #1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0552      	lsls	r2, r2, #21
 80030f4:	4311      	orrs	r1, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030fa:	0852      	lsrs	r2, r2, #1
 80030fc:	3a01      	subs	r2, #1
 80030fe:	0652      	lsls	r2, r2, #25
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003106:	06d2      	lsls	r2, r2, #27
 8003108:	430a      	orrs	r2, r1
 800310a:	493a      	ldr	r1, [pc, #232]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 800310c:	4313      	orrs	r3, r2
 800310e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003110:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a37      	ldr	r2, [pc, #220]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4a34      	ldr	r2, [pc, #208]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003126:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003128:	f7fe f82e 	bl	8001188 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe f82a 	bl	8001188 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e066      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800314e:	e05e      	b.n	800320e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e05d      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d156      	bne.n	800320e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a23      	ldr	r2, [pc, #140]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800316c:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003176:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003178:	f7fe f806 	bl	8001188 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003180:	f7fe f802 	bl	8001188 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e03e      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x7b0>
 800319e:	e036      	b.n	800320e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d031      	beq.n	800320a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80031ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80031c4:	f023 0303 	bic.w	r3, r3, #3
 80031c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <HAL_RCC_OscConfig+0x824>)
 80031d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7fd ffd5 	bl	8001188 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e0:	e00c      	b.n	80031fc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e2:	f7fd ffd1 	bl	8001188 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d905      	bls.n	80031fc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e00d      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
 80031f4:	40021000 	.word	0x40021000
 80031f8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCC_OscConfig+0x848>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ec      	bne.n	80031e2 <HAL_RCC_OscConfig+0x812>
 8003208:	e001      	b.n	800320e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000

0800321c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e10f      	b.n	8003454 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b89      	ldr	r3, [pc, #548]	; (800345c <HAL_RCC_ClockConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d910      	bls.n	8003264 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b86      	ldr	r3, [pc, #536]	; (800345c <HAL_RCC_ClockConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 020f 	bic.w	r2, r3, #15
 800324a:	4984      	ldr	r1, [pc, #528]	; (800345c <HAL_RCC_ClockConfig+0x240>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b82      	ldr	r3, [pc, #520]	; (800345c <HAL_RCC_ClockConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0f7      	b.n	8003454 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8089 	beq.w	8003384 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d133      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800327a:	4b79      	ldr	r3, [pc, #484]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0e4      	b.n	8003454 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800328a:	f000 f9d7 	bl	800363c <RCC_GetSysClockFreqFromPLLSource>
 800328e:	4602      	mov	r2, r0
 8003290:	4b74      	ldr	r3, [pc, #464]	; (8003464 <HAL_RCC_ClockConfig+0x248>)
 8003292:	429a      	cmp	r2, r3
 8003294:	d955      	bls.n	8003342 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003296:	4b72      	ldr	r3, [pc, #456]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032a2:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032aa:	4a6d      	ldr	r2, [pc, #436]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 80032ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	e044      	b.n	8003342 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d03e      	beq.n	8003342 <HAL_RCC_ClockConfig+0x126>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d13a      	bne.n	8003342 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032cc:	4b64      	ldr	r3, [pc, #400]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032d4:	4a62      	ldr	r2, [pc, #392]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e02f      	b.n	8003342 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ea:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d115      	bne.n	8003322 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0ac      	b.n	8003454 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003302:	4b57      	ldr	r3, [pc, #348]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0a0      	b.n	8003454 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003312:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e098      	b.n	8003454 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003322:	f000 f8a7 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003326:	4602      	mov	r2, r0
 8003328:	4b4e      	ldr	r3, [pc, #312]	; (8003464 <HAL_RCC_ClockConfig+0x248>)
 800332a:	429a      	cmp	r2, r3
 800332c:	d909      	bls.n	8003342 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800332e:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003336:	4a4a      	ldr	r2, [pc, #296]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4944      	ldr	r1, [pc, #272]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003354:	f7fd ff18 	bl	8001188 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	e00a      	b.n	8003372 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f7fd ff14 	bl	8001188 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e070      	b.n	8003454 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 020c 	and.w	r2, r3, #12
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d1eb      	bne.n	800335c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b33      	ldr	r3, [pc, #204]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4930      	ldr	r1, [pc, #192]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b80      	cmp	r3, #128	; 0x80
 80033a8:	d105      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033aa:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033b4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b6:	4b29      	ldr	r3, [pc, #164]	; (800345c <HAL_RCC_ClockConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d210      	bcs.n	80033e6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c4:	4b25      	ldr	r3, [pc, #148]	; (800345c <HAL_RCC_ClockConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 020f 	bic.w	r2, r3, #15
 80033cc:	4923      	ldr	r1, [pc, #140]	; (800345c <HAL_RCC_ClockConfig+0x240>)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCC_ClockConfig+0x240>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e036      	b.n	8003454 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f2:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	4918      	ldr	r1, [pc, #96]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4910      	ldr	r1, [pc, #64]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003424:	f000 f826 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003428:	4601      	mov	r1, r0
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_RCC_ClockConfig+0x244>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <HAL_RCC_ClockConfig+0x24c>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	fa21 f303 	lsr.w	r3, r1, r3
 8003440:	4a0a      	ldr	r2, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x250>)
 8003442:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_ClockConfig+0x254>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fe4d 	bl	80010e8 <HAL_InitTick>
 800344e:	4603      	mov	r3, r0
 8003450:	73fb      	strb	r3, [r7, #15]

  return status;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40022000 	.word	0x40022000
 8003460:	40021000 	.word	0x40021000
 8003464:	04c4b400 	.word	0x04c4b400
 8003468:	0800418c 	.word	0x0800418c
 800346c:	20000000 	.word	0x20000000
 8003470:	20000004 	.word	0x20000004

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003482:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <HAL_RCC_GetSysClockFreq+0x104>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348c:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <HAL_RCC_GetSysClockFreq+0x104>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x34>
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d121      	bne.n	80034e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d11e      	bne.n	80034e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034a8:	4b33      	ldr	r3, [pc, #204]	; (8003578 <HAL_RCC_GetSysClockFreq+0x104>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_RCC_GetSysClockFreq+0x104>)
 80034b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	e005      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034c4:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <HAL_RCC_GetSysClockFreq+0x104>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034d0:	4a2a      	ldr	r2, [pc, #168]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10d      	bne.n	80034fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d102      	bne.n	80034f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	e004      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034f8:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_RCC_GetSysClockFreq+0x110>)
 80034fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	d133      	bne.n	800356a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003502:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_RCC_GetSysClockFreq+0x104>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0xa4>
 8003512:	2b03      	cmp	r3, #3
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0xaa>
 8003516:	e005      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_RCC_GetSysClockFreq+0x10c>)
 800351a:	617b      	str	r3, [r7, #20]
      break;
 800351c:	e005      	b.n	800352a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <HAL_RCC_GetSysClockFreq+0x110>)
 8003520:	617b      	str	r3, [r7, #20]
      break;
 8003522:	e002      	b.n	800352a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	617b      	str	r3, [r7, #20]
      break;
 8003528:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <HAL_RCC_GetSysClockFreq+0x104>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	3301      	adds	r3, #1
 8003536:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <HAL_RCC_GetSysClockFreq+0x104>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	fb02 f203 	mul.w	r2, r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_GetSysClockFreq+0x104>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0e5b      	lsrs	r3, r3, #25
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	3301      	adds	r3, #1
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800356a:	69bb      	ldr	r3, [r7, #24]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3724      	adds	r7, #36	; 0x24
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000
 800357c:	0800419c 	.word	0x0800419c
 8003580:	00f42400 	.word	0x00f42400
 8003584:	007a1200 	.word	0x007a1200

08003588 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035a0:	f7ff f952 	bl	8002848 <HAL_PWREx_GetVoltageRange>
 80035a4:	6178      	str	r0, [r7, #20]
 80035a6:	e014      	b.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	4a21      	ldr	r2, [pc, #132]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	; 0x58
 80035b4:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035c0:	f7ff f942 	bl	8002848 <HAL_PWREx_GetVoltageRange>
 80035c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d10b      	bne.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d913      	bls.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2ba0      	cmp	r3, #160	; 0xa0
 80035e4:	d902      	bls.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035e6:	2302      	movs	r3, #2
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	e00d      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035ec:	2301      	movs	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e00a      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b7f      	cmp	r3, #127	; 0x7f
 80035f6:	d902      	bls.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80035f8:	2302      	movs	r3, #2
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e004      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b70      	cmp	r3, #112	; 0x70
 8003602:	d101      	bne.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003604:	2301      	movs	r3, #1
 8003606:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 020f 	bic.w	r2, r3, #15
 8003610:	4909      	ldr	r1, [pc, #36]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003618:	4b07      	ldr	r3, [pc, #28]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	40022000 	.word	0x40022000

0800363c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003646:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d118      	bne.n	8003684 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003652:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800365e:	4b27      	ldr	r3, [pc, #156]	; (80036fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	e005      	b.n	800367a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800366e:	4b23      	ldr	r3, [pc, #140]	; (80036fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800367a:	4a21      	ldr	r2, [pc, #132]	; (8003700 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d002      	beq.n	800369a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003694:	2b03      	cmp	r3, #3
 8003696:	d003      	beq.n	80036a0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003698:	e005      	b.n	80036a6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800369a:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800369c:	613b      	str	r3, [r7, #16]
    break;
 800369e:	e005      	b.n	80036ac <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80036a2:	613b      	str	r3, [r7, #16]
    break;
 80036a4:	e002      	b.n	80036ac <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	613b      	str	r3, [r7, #16]
    break;
 80036aa:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3301      	adds	r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	fb02 f203 	mul.w	r2, r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	0e5b      	lsrs	r3, r3, #25
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	3301      	adds	r3, #1
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80036ec:	683b      	ldr	r3, [r7, #0]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	0800419c 	.word	0x0800419c
 8003704:	00f42400 	.word	0x00f42400
 8003708:	007a1200 	.word	0x007a1200

0800370c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003714:	2300      	movs	r3, #0
 8003716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003718:	2300      	movs	r3, #0
 800371a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03d      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d00b      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d804      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d015      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800373c:	e01d      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800373e:	2b60      	cmp	r3, #96	; 0x60
 8003740:	d01e      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003742:	2b80      	cmp	r3, #128	; 0x80
 8003744:	d01c      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003746:	e018      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003748:	4b86      	ldr	r3, [pc, #536]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a85      	ldr	r2, [pc, #532]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800374e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003752:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003754:	e015      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fafd 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003766:	e00c      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3320      	adds	r3, #32
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fbe4 	bl	8003f3c <RCCEx_PLLSAI2_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003778:	e003      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	74fb      	strb	r3, [r7, #19]
      break;
 800377e:	e000      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003788:	4b76      	ldr	r3, [pc, #472]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800378a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800378e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003796:	4973      	ldr	r1, [pc, #460]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800379e:	e001      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d042      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b8:	d00f      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xce>
 80037ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037be:	d805      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d011      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80037c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c8:	d017      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xee>
 80037ca:	e01f      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80037cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d0:	d01f      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d01c      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037d8:	e018      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037da:	4b62      	ldr	r3, [pc, #392]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	4a61      	ldr	r2, [pc, #388]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037e6:	e015      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fab4 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037f8:	e00c      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3320      	adds	r3, #32
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fb9b 	bl	8003f3c <RCCEx_PLLSAI2_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800380a:	e003      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	74fb      	strb	r3, [r7, #19]
      break;
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800381a:	4b52      	ldr	r3, [pc, #328]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800381c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	494e      	ldr	r1, [pc, #312]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003830:	e001      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 809f 	beq.w	8003982 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003844:	2300      	movs	r3, #0
 8003846:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003848:	4b46      	ldr	r3, [pc, #280]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	4a40      	ldr	r2, [pc, #256]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	6593      	str	r3, [r2, #88]	; 0x58
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003876:	2301      	movs	r3, #1
 8003878:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800387a:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a3a      	ldr	r2, [pc, #232]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003886:	f7fd fc7f 	bl	8001188 <HAL_GetTick>
 800388a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800388c:	e009      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fd fc7b 	bl	8001188 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d902      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	74fb      	strb	r3, [r7, #19]
        break;
 80038a0:	e005      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ef      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d15b      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038b4:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01f      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d019      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038fe:	4a19      	ldr	r2, [pc, #100]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d016      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fc3a 	bl	8001188 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003916:	e00b      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fd fc36 	bl	8001188 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d902      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	74fb      	strb	r3, [r7, #19]
            break;
 800392e:	e006      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0ec      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800393e:	7cfb      	ldrb	r3, [r7, #19]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10c      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800395c:	e008      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	74bb      	strb	r3, [r7, #18]
 8003962:	e005      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003964:	40021000 	.word	0x40021000
 8003968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003970:	7c7b      	ldrb	r3, [r7, #17]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d105      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003976:	4ba0      	ldr	r3, [pc, #640]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	4a9f      	ldr	r2, [pc, #636]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800398e:	4b9a      	ldr	r3, [pc, #616]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f023 0203 	bic.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	4996      	ldr	r1, [pc, #600]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b0:	4b91      	ldr	r3, [pc, #580]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f023 020c 	bic.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	498e      	ldr	r1, [pc, #568]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039d2:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	4985      	ldr	r1, [pc, #532]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039f4:	4b80      	ldr	r3, [pc, #512]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	497d      	ldr	r1, [pc, #500]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a16:	4b78      	ldr	r3, [pc, #480]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	4974      	ldr	r1, [pc, #464]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a38:	4b6f      	ldr	r3, [pc, #444]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	496c      	ldr	r1, [pc, #432]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a5a:	4b67      	ldr	r3, [pc, #412]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a68:	4963      	ldr	r1, [pc, #396]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a7c:	4b5e      	ldr	r3, [pc, #376]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a8a:	495b      	ldr	r1, [pc, #364]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a9e:	4b56      	ldr	r3, [pc, #344]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	4952      	ldr	r1, [pc, #328]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ac0:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	494a      	ldr	r1, [pc, #296]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae2:	4b45      	ldr	r3, [pc, #276]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	4941      	ldr	r1, [pc, #260]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b04:	4b3c      	ldr	r3, [pc, #240]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	4939      	ldr	r1, [pc, #228]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d028      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b34:	4930      	ldr	r1, [pc, #192]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b44:	d106      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b46:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b50:	60d3      	str	r3, [r2, #12]
 8003b52:	e011      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	2101      	movs	r1, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f8f9 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003b74:	7cfb      	ldrb	r3, [r7, #19]
 8003b76:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d04d      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8c:	d108      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b9a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b9e:	e012      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ba6:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bbe:	490e      	ldr	r1, [pc, #56]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bce:	d106      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bda:	60d3      	str	r3, [r2, #12]
 8003bdc:	e020      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be6:	d109      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a02      	ldr	r2, [pc, #8]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	60d3      	str	r3, [r2, #12]
 8003bf4:	e014      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f8a5 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d028      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c2c:	4b4a      	ldr	r3, [pc, #296]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c3a:	4947      	ldr	r1, [pc, #284]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c4c:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c56:	60d3      	str	r3, [r2, #12]
 8003c58:	e011      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c62:	d10c      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f876 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01e      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c8a:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9a:	492f      	ldr	r1, [pc, #188]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f851 	bl	8003d5c <RCCEx_PLLSAI1_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cbe:	7cfb      	ldrb	r3, [r7, #19]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cd4:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cda:	f023 0204 	bic.w	r2, r3, #4
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce4:	491c      	ldr	r1, [pc, #112]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cf8:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cfe:	f023 0218 	bic.w	r2, r3, #24
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	4913      	ldr	r1, [pc, #76]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d017      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2c:	490a      	ldr	r1, [pc, #40]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000

08003d5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d6a:	4b70      	ldr	r3, [pc, #448]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00e      	beq.n	8003d94 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d76:	4b6d      	ldr	r3, [pc, #436]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0203 	and.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d103      	bne.n	8003d8e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
       ||
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d13f      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
 8003d92:	e03c      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d00c      	beq.n	8003db6 <RCCEx_PLLSAI1_Config+0x5a>
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d013      	beq.n	8003dc8 <RCCEx_PLLSAI1_Config+0x6c>
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d120      	bne.n	8003de6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003da4:	4b61      	ldr	r3, [pc, #388]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11d      	bne.n	8003dec <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db4:	e01a      	b.n	8003dec <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db6:	4b5d      	ldr	r3, [pc, #372]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc6:	e013      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dc8:	4b58      	ldr	r3, [pc, #352]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dd4:	4b55      	ldr	r3, [pc, #340]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003de4:	e006      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dea:	e004      	b.n	8003df6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003dec:	bf00      	nop
 8003dee:	e002      	b.n	8003df6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003df0:	bf00      	nop
 8003df2:	e000      	b.n	8003df6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003df4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d108      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f023 0203 	bic.w	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4948      	ldr	r1, [pc, #288]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f040 8086 	bne.w	8003f22 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e16:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a44      	ldr	r2, [pc, #272]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e22:	f7fd f9b1 	bl	8001188 <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e28:	e009      	b.n	8003e3e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e2a:	f7fd f9ad 	bl	8001188 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d902      	bls.n	8003e3e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e3c:	e005      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ef      	bne.n	8003e2a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d168      	bne.n	8003f22 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d113      	bne.n	8003e7e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e56:	4b35      	ldr	r3, [pc, #212]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	0211      	lsls	r1, r2, #8
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68d2      	ldr	r2, [r2, #12]
 8003e68:	06d2      	lsls	r2, r2, #27
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6852      	ldr	r2, [r2, #4]
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	430a      	orrs	r2, r1
 8003e76:	492d      	ldr	r1, [pc, #180]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	610b      	str	r3, [r1, #16]
 8003e7c:	e02d      	b.n	8003eda <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d115      	bne.n	8003eb0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e84:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	0211      	lsls	r1, r2, #8
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6912      	ldr	r2, [r2, #16]
 8003e96:	0852      	lsrs	r2, r2, #1
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0552      	lsls	r2, r2, #21
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6852      	ldr	r2, [r2, #4]
 8003ea2:	3a01      	subs	r2, #1
 8003ea4:	0112      	lsls	r2, r2, #4
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	4920      	ldr	r1, [pc, #128]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	610b      	str	r3, [r1, #16]
 8003eae:	e014      	b.n	8003eda <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6892      	ldr	r2, [r2, #8]
 8003ebc:	0211      	lsls	r1, r2, #8
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6952      	ldr	r2, [r2, #20]
 8003ec2:	0852      	lsrs	r2, r2, #1
 8003ec4:	3a01      	subs	r2, #1
 8003ec6:	0652      	lsls	r2, r2, #25
 8003ec8:	4311      	orrs	r1, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6852      	ldr	r2, [r2, #4]
 8003ece:	3a01      	subs	r2, #1
 8003ed0:	0112      	lsls	r2, r2, #4
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	4915      	ldr	r1, [pc, #84]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ee4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee6:	f7fd f94f 	bl	8001188 <HAL_GetTick>
 8003eea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eec:	e009      	b.n	8003f02 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eee:	f7fd f94b 	bl	8001188 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d902      	bls.n	8003f02 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	73fb      	strb	r3, [r7, #15]
          break;
 8003f00:	e005      	b.n	8003f0e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ef      	beq.n	8003eee <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	4903      	ldr	r1, [pc, #12]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	07ff800f 	.word	0x07ff800f
 8003f34:	ff9f800f 	.word	0xff9f800f
 8003f38:	f9ff800f 	.word	0xf9ff800f

08003f3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f4a:	4b70      	ldr	r3, [pc, #448]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f56:	4b6d      	ldr	r3, [pc, #436]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0203 	and.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d103      	bne.n	8003f6e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
       ||
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d13f      	bne.n	8003fee <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
 8003f72:	e03c      	b.n	8003fee <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d00c      	beq.n	8003f96 <RCCEx_PLLSAI2_Config+0x5a>
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d013      	beq.n	8003fa8 <RCCEx_PLLSAI2_Config+0x6c>
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d120      	bne.n	8003fc6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f84:	4b61      	ldr	r3, [pc, #388]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d11d      	bne.n	8003fcc <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f94:	e01a      	b.n	8003fcc <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f96:	4b5d      	ldr	r3, [pc, #372]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d116      	bne.n	8003fd0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa6:	e013      	b.n	8003fd0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fa8:	4b58      	ldr	r3, [pc, #352]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10f      	bne.n	8003fd4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fb4:	4b55      	ldr	r3, [pc, #340]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fc4:	e006      	b.n	8003fd4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fca:	e004      	b.n	8003fd6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003fcc:	bf00      	nop
 8003fce:	e002      	b.n	8003fd6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003fd4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f023 0203 	bic.w	r2, r3, #3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4948      	ldr	r1, [pc, #288]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f040 8086 	bne.w	8004102 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ff6:	4b45      	ldr	r3, [pc, #276]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a44      	ldr	r2, [pc, #272]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004002:	f7fd f8c1 	bl	8001188 <HAL_GetTick>
 8004006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004008:	e009      	b.n	800401e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800400a:	f7fd f8bd 	bl	8001188 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d902      	bls.n	800401e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	73fb      	strb	r3, [r7, #15]
        break;
 800401c:	e005      	b.n	800402a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800401e:	4b3b      	ldr	r3, [pc, #236]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ef      	bne.n	800400a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d168      	bne.n	8004102 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d113      	bne.n	800405e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004036:	4b35      	ldr	r3, [pc, #212]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	4b35      	ldr	r3, [pc, #212]	; (8004110 <RCCEx_PLLSAI2_Config+0x1d4>)
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6892      	ldr	r2, [r2, #8]
 8004042:	0211      	lsls	r1, r2, #8
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68d2      	ldr	r2, [r2, #12]
 8004048:	06d2      	lsls	r2, r2, #27
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6852      	ldr	r2, [r2, #4]
 8004050:	3a01      	subs	r2, #1
 8004052:	0112      	lsls	r2, r2, #4
 8004054:	430a      	orrs	r2, r1
 8004056:	492d      	ldr	r1, [pc, #180]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	614b      	str	r3, [r1, #20]
 800405c:	e02d      	b.n	80040ba <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d115      	bne.n	8004090 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004064:	4b29      	ldr	r3, [pc, #164]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 800406a:	4013      	ands	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6892      	ldr	r2, [r2, #8]
 8004070:	0211      	lsls	r1, r2, #8
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6912      	ldr	r2, [r2, #16]
 8004076:	0852      	lsrs	r2, r2, #1
 8004078:	3a01      	subs	r2, #1
 800407a:	0552      	lsls	r2, r2, #21
 800407c:	4311      	orrs	r1, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6852      	ldr	r2, [r2, #4]
 8004082:	3a01      	subs	r2, #1
 8004084:	0112      	lsls	r2, r2, #4
 8004086:	430a      	orrs	r2, r1
 8004088:	4920      	ldr	r1, [pc, #128]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	614b      	str	r3, [r1, #20]
 800408e:	e014      	b.n	80040ba <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004090:	4b1e      	ldr	r3, [pc, #120]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	4b20      	ldr	r3, [pc, #128]	; (8004118 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004096:	4013      	ands	r3, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6892      	ldr	r2, [r2, #8]
 800409c:	0211      	lsls	r1, r2, #8
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6952      	ldr	r2, [r2, #20]
 80040a2:	0852      	lsrs	r2, r2, #1
 80040a4:	3a01      	subs	r2, #1
 80040a6:	0652      	lsls	r2, r2, #25
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6852      	ldr	r2, [r2, #4]
 80040ae:	3a01      	subs	r2, #1
 80040b0:	0112      	lsls	r2, r2, #4
 80040b2:	430a      	orrs	r2, r1
 80040b4:	4915      	ldr	r1, [pc, #84]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd f85f 	bl	8001188 <HAL_GetTick>
 80040ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040cc:	e009      	b.n	80040e2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040ce:	f7fd f85b 	bl	8001188 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d902      	bls.n	80040e2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	73fb      	strb	r3, [r7, #15]
          break;
 80040e0:	e005      	b.n	80040ee <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ef      	beq.n	80040ce <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4903      	ldr	r1, [pc, #12]	; (800410c <RCCEx_PLLSAI2_Config+0x1d0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000
 8004110:	07ff800f 	.word	0x07ff800f
 8004114:	ff9f800f 	.word	0xff9f800f
 8004118:	f9ff800f 	.word	0xf9ff800f

0800411c <__libc_init_array>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	4e0d      	ldr	r6, [pc, #52]	; (8004154 <__libc_init_array+0x38>)
 8004120:	4c0d      	ldr	r4, [pc, #52]	; (8004158 <__libc_init_array+0x3c>)
 8004122:	1ba4      	subs	r4, r4, r6
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	2500      	movs	r5, #0
 8004128:	42a5      	cmp	r5, r4
 800412a:	d109      	bne.n	8004140 <__libc_init_array+0x24>
 800412c:	4e0b      	ldr	r6, [pc, #44]	; (800415c <__libc_init_array+0x40>)
 800412e:	4c0c      	ldr	r4, [pc, #48]	; (8004160 <__libc_init_array+0x44>)
 8004130:	f000 f820 	bl	8004174 <_init>
 8004134:	1ba4      	subs	r4, r4, r6
 8004136:	10a4      	asrs	r4, r4, #2
 8004138:	2500      	movs	r5, #0
 800413a:	42a5      	cmp	r5, r4
 800413c:	d105      	bne.n	800414a <__libc_init_array+0x2e>
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004144:	4798      	blx	r3
 8004146:	3501      	adds	r5, #1
 8004148:	e7ee      	b.n	8004128 <__libc_init_array+0xc>
 800414a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800414e:	4798      	blx	r3
 8004150:	3501      	adds	r5, #1
 8004152:	e7f2      	b.n	800413a <__libc_init_array+0x1e>
 8004154:	080041cc 	.word	0x080041cc
 8004158:	080041cc 	.word	0x080041cc
 800415c:	080041cc 	.word	0x080041cc
 8004160:	080041d0 	.word	0x080041d0

08004164 <memset>:
 8004164:	4402      	add	r2, r0
 8004166:	4603      	mov	r3, r0
 8004168:	4293      	cmp	r3, r2
 800416a:	d100      	bne.n	800416e <memset+0xa>
 800416c:	4770      	bx	lr
 800416e:	f803 1b01 	strb.w	r1, [r3], #1
 8004172:	e7f9      	b.n	8004168 <memset+0x4>

08004174 <_init>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	bf00      	nop
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr

08004180 <_fini>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	bf00      	nop
 8004184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004186:	bc08      	pop	{r3}
 8004188:	469e      	mov	lr, r3
 800418a:	4770      	bx	lr
