
Lab2_Group3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a0  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080048a0  080048a0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048a0  080048a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080048a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000010  080048b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080048b8  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000beb7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001865  00000000  00000000  0002bef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a68  00000000  00000000  0002d760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a0  00000000  00000000  0002e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029fa5  00000000  00000000  0002eb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008166  00000000  00000000  00058b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107b08  00000000  00000000  00060c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016877b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b74  00000000  00000000  001687f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004848 	.word	0x08004848

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08004848 	.word	0x08004848

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	0000      	movs	r0, r0
	...

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a44:	b08a      	sub	sp, #40	; 0x28
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f000 fb4f 	bl	80010ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f930 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 fa1a 	bl	8000e88 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a54:	f000 f9b4 	bl	8000dc0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); // calibrate for better Vref
 8000a58:	217f      	movs	r1, #127	; 0x7f
 8000a5a:	4887      	ldr	r0, [pc, #540]	; (8000c78 <main+0x238>)
 8000a5c:	f001 fedd 	bl	800281a <HAL_ADCEx_Calibration_Start>
  // T = tempCoef * (TS_DATA  TS_CAL1) + 30
  // where tempCoef = (tempCalT2 - tempCalT1)/ (tempCalV2 - tempCalV1) doesn't change
  // so it only has to be calculated once before the while loop
  float tempCalV1 = (float) (*TEMPSENSOR_CAL1_ADDR);
 8000a60:	4b86      	ldr	r3, [pc, #536]	; (8000c7c <main+0x23c>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	ee07 3a90 	vmov	s15, r3
 8000a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a6c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float tempCalV2 = (float) (*TEMPSENSOR_CAL2_ADDR);
 8000a70:	4b83      	ldr	r3, [pc, #524]	; (8000c80 <main+0x240>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	ee07 3a90 	vmov	s15, r3
 8000a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a7c:	edc7 7a08 	vstr	s15, [r7, #32]
  float tempCoef = (float)(TEMPSENSOR_CAL2_TEMP-TEMPSENSOR_CAL1_TEMP)/ (tempCalV2 - tempCalV1);
 8000a80:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000a88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a8c:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8000c84 <main+0x244>
 8000a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a94:	edc7 7a07 	vstr	s15, [r7, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
 8000aa6:	615a      	str	r2, [r3, #20]
  uint16_t  VREFINT_CAL = *VREFINT_CAL_ADDR;
 8000aa8:	4b77      	ldr	r3, [pc, #476]	; (8000c88 <main+0x248>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	837b      	strh	r3, [r7, #26]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (HAL_ADC_Start(&hadc1) != HAL_OK) { // ensure everything is enabled, state bitfield is clean, etc.
 8000aae:	4872      	ldr	r0, [pc, #456]	; (8000c78 <main+0x238>)
 8000ab0:	f000 ff10 	bl	80018d4 <HAL_ADC_Start>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <main+0x7e>
	  Error_Handler();
 8000aba:	f000 fa35 	bl	8000f28 <Error_Handler>
  }
  while (1)
  {
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)){ // RESET=0U
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	4872      	ldr	r0, [pc, #456]	; (8000c8c <main+0x24c>)
 8000ac4:	f002 f9e0 	bl	8002e88 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10f      	bne.n	8000aee <main+0xae>
		  HAL_Delay(1);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f000 fb80 	bl	80011d4 <HAL_Delay>
		  if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)){ // SET=1U, a rising edge is detected
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	486c      	ldr	r0, [pc, #432]	; (8000c8c <main+0x24c>)
 8000ada:	f002 f9d5 	bl	8002e88 <HAL_GPIO_ReadPin>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d004      	beq.n	8000aee <main+0xae>
		  	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); // toggle LED mode
 8000ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae8:	4869      	ldr	r0, [pc, #420]	; (8000c90 <main+0x250>)
 8000aea:	f002 f9fd 	bl	8002ee8 <HAL_GPIO_TogglePin>
		  }
	  }



		if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){ // Wait for regular group conversion to be completed
 8000aee:	2164      	movs	r1, #100	; 0x64
 8000af0:	4861      	ldr	r0, [pc, #388]	; (8000c78 <main+0x238>)
 8000af2:	f000 ff52 	bl	800199a <HAL_ADC_PollForConversion>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d142      	bne.n	8000b82 <main+0x142>
				  fromADC = HAL_ADC_GetValue(&hadc1);// fetch reading from ADC data register as an uint32_t
 8000afc:	485e      	ldr	r0, [pc, #376]	; (8000c78 <main+0x238>)
 8000afe:	f000 ffd4 	bl	8001aaa <HAL_ADC_GetValue>
 8000b02:	4602      	mov	r2, r0
 8000b04:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <main+0x254>)
 8000b06:	601a      	str	r2, [r3, #0]
				  // VREF+ = VREF+_Charac  * VREFINT_CAL / VREFINT_DATA
				  vref_measured = 3000.0 * (float)VREFINT_CAL / (float)fromADC;
 8000b08:	8b7b      	ldrh	r3, [r7, #26]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b12:	ee17 0a90 	vmov	r0, s15
 8000b16:	f7ff fcd7 	bl	80004c8 <__aeabi_f2d>
 8000b1a:	a355      	add	r3, pc, #340	; (adr r3, 8000c70 <main+0x230>)
 8000b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b20:	f7ff fd2a 	bl	8000578 <__aeabi_dmul>
 8000b24:	4603      	mov	r3, r0
 8000b26:	460c      	mov	r4, r1
 8000b28:	4625      	mov	r5, r4
 8000b2a:	461c      	mov	r4, r3
 8000b2c:	4b59      	ldr	r3, [pc, #356]	; (8000c94 <main+0x254>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b38:	ee17 0a90 	vmov	r0, s15
 8000b3c:	f7ff fcc4 	bl	80004c8 <__aeabi_f2d>
 8000b40:	4602      	mov	r2, r0
 8000b42:	460b      	mov	r3, r1
 8000b44:	4620      	mov	r0, r4
 8000b46:	4629      	mov	r1, r5
 8000b48:	f7ff fe40 	bl	80007cc <__aeabi_ddiv>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	460c      	mov	r4, r1
 8000b50:	4618      	mov	r0, r3
 8000b52:	4621      	mov	r1, r4
 8000b54:	f7ff ff22 	bl	800099c <__aeabi_d2f>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4b4f      	ldr	r3, [pc, #316]	; (8000c98 <main+0x258>)
 8000b5c:	601a      	str	r2, [r3, #0]
				  // the auto generated helper macro for sanity check
				  vref_HALchecker = __LL_ADC_CALC_VREFANALOG_VOLTAGE(fromADC, ADC_RESOLUTION_12B);
 8000b5e:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <main+0x248>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b68:	fb03 f202 	mul.w	r2, r3, r2
 8000b6c:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <main+0x254>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b74:	ee07 3a90 	vmov	s15, r3
 8000b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b7c:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <main+0x25c>)
 8000b7e:	edc3 7a00 	vstr	s15, [r3]
		}

	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){ // Wait for regular group conversion to be completed
 8000b82:	2164      	movs	r1, #100	; 0x64
 8000b84:	483c      	ldr	r0, [pc, #240]	; (8000c78 <main+0x238>)
 8000b86:	f000 ff08 	bl	800199a <HAL_ADC_PollForConversion>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d196      	bne.n	8000abe <main+0x7e>
			  fromADC = HAL_ADC_GetValue(&hadc1); // fetch reading from ADC data register as an uint32_t
 8000b90:	4839      	ldr	r0, [pc, #228]	; (8000c78 <main+0x238>)
 8000b92:	f000 ff8a 	bl	8001aaa <HAL_ADC_GetValue>
 8000b96:	4602      	mov	r2, r0
 8000b98:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <main+0x254>)
 8000b9a:	601a      	str	r2, [r3, #0]
	    	  // the auto generated helper macro for sanity check
			  tempCelcius_HALchecker = __HAL_ADC_CALC_TEMPERATURE(vref_measured, fromADC, ADC_RESOLUTION_12B);
 8000b9c:	4b3d      	ldr	r3, [pc, #244]	; (8000c94 <main+0x254>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	ee07 3a90 	vmov	s15, r3
 8000ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ba8:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <main+0x258>)
 8000baa:	edd3 7a00 	vldr	s15, [r3]
 8000bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bb2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8000ca0 <main+0x260>
 8000bb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bbe:	ee17 2a90 	vmov	r2, s15
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <main+0x23c>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2264      	movs	r2, #100	; 0x64
 8000bca:	fb02 f203 	mul.w	r2, r2, r3
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <main+0x240>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <main+0x23c>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	1acb      	subs	r3, r1, r3
 8000bda:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bde:	331e      	adds	r3, #30
 8000be0:	ee07 3a90 	vmov	s15, r3
 8000be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <main+0x264>)
 8000bea:	edc3 7a00 	vstr	s15, [r3]
	    	  // T = tempCoef * (TS_DATA �? TS_CAL1) + 30, where TSCAL data are acquired at VREF+char=3.0 V
	    	  // Our Vref is not 3.0V, need to scale the readout in the formula by TSDATA*(VREF+actual/VREF+char)
	    	  tempCelcius_measured = 30.0 + tempCoef *
 8000bee:	69f8      	ldr	r0, [r7, #28]
 8000bf0:	f7ff fc6a 	bl	80004c8 <__aeabi_f2d>
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460d      	mov	r5, r1
	    			  ((float)fromADC * vref_measured / 3000.0 - tempCalV1);
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <main+0x254>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	ee07 3a90 	vmov	s15, r3
 8000c00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <main+0x258>)
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c0e:	ee17 0a90 	vmov	r0, s15
 8000c12:	f7ff fc59 	bl	80004c8 <__aeabi_f2d>
 8000c16:	a316      	add	r3, pc, #88	; (adr r3, 8000c70 <main+0x230>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fdd6 	bl	80007cc <__aeabi_ddiv>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4690      	mov	r8, r2
 8000c26:	4699      	mov	r9, r3
 8000c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c2a:	f7ff fc4d 	bl	80004c8 <__aeabi_f2d>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	460b      	mov	r3, r1
 8000c32:	4640      	mov	r0, r8
 8000c34:	4649      	mov	r1, r9
 8000c36:	f7ff fae7 	bl	8000208 <__aeabi_dsub>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
	    	  tempCelcius_measured = 30.0 + tempCoef *
 8000c3e:	4620      	mov	r0, r4
 8000c40:	4629      	mov	r1, r5
 8000c42:	f7ff fc99 	bl	8000578 <__aeabi_dmul>
 8000c46:	4603      	mov	r3, r0
 8000c48:	460c      	mov	r4, r1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <main+0x268>)
 8000c54:	f7ff fada 	bl	800020c <__adddf3>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	460c      	mov	r4, r1
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	4621      	mov	r1, r4
 8000c60:	f7ff fe9c 	bl	800099c <__aeabi_d2f>
 8000c64:	4602      	mov	r2, r0
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <main+0x26c>)
 8000c68:	601a      	str	r2, [r3, #0]
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)){ // RESET=0U
 8000c6a:	e728      	b.n	8000abe <main+0x7e>
 8000c6c:	f3af 8000 	nop.w
 8000c70:	00000000 	.word	0x00000000
 8000c74:	40a77000 	.word	0x40a77000
 8000c78:	20000038 	.word	0x20000038
 8000c7c:	1fff75a8 	.word	0x1fff75a8
 8000c80:	1fff75ca 	.word	0x1fff75ca
 8000c84:	42c80000 	.word	0x42c80000
 8000c88:	1fff75aa 	.word	0x1fff75aa
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	48000400 	.word	0x48000400
 8000c94:	200000a0 	.word	0x200000a0
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	2000002c 	.word	0x2000002c
 8000ca0:	453b8000 	.word	0x453b8000
 8000ca4:	20000034 	.word	0x20000034
 8000ca8:	403e0000 	.word	0x403e0000
 8000cac:	20000030 	.word	0x20000030

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0bc      	sub	sp, #240	; 0xf0
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cba:	2244      	movs	r2, #68	; 0x44
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 fdba 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2294      	movs	r2, #148	; 0x94
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f003 fdac 	bl	8004838 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f002 f93b 	bl	8002f5c <HAL_PWREx_ControlVoltageScaling>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000cec:	f000 f91c 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d02:	2360      	movs	r3, #96	; 0x60
 8000d04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d1a:	233c      	movs	r3, #60	; 0x3c
 8000d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 f9b4 	bl	80030a4 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d42:	f000 f8f1 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d68:	2105      	movs	r1, #5
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 fdc0 	bl	80038f0 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d76:	f000 f8d7 	bl	8000f28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d7e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000d90:	2318      	movs	r3, #24
 8000d92:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000da4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 f819 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000db4:	f000 f8b8 	bl	8000f28 <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	37f0      	adds	r7, #240	; 0xf0
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dd6:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000dd8:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <MX_ADC1_Init+0xc0>)
 8000dda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000df6:	2208      	movs	r2, #8
 8000df8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e36:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e38:	f000 fc02 	bl	8001640 <HAL_ADC_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000e42:	f000 f871 	bl	8000f28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_ADC1_Init+0xc4>)
 8000e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e52:	237f      	movs	r3, #127	; 0x7f
 8000e54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e56:	2304      	movs	r3, #4
 8000e58:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <MX_ADC1_Init+0xbc>)
 8000e64:	f001 f800 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e6e:	f000 f85b 	bl	8000f28 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000038 	.word	0x20000038
 8000e80:	50040000 	.word	0x50040000
 8000e84:	c7520000 	.word	0xc7520000

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_GPIO_Init+0x94>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <MX_GPIO_Init+0x94>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_GPIO_Init+0x94>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_GPIO_Init+0x94>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <MX_GPIO_Init+0x94>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_GPIO_Init+0x94>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <MX_GPIO_Init+0x98>)
 8000ed6:	f001 ffef 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_GPIO_Init+0x9c>)
 8000ef0:	f001 fe38 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ef4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_GPIO_Init+0x98>)
 8000f0e:	f001 fe29 	bl	8002b64 <HAL_GPIO_Init>

}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <Error_Handler+0x6>

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x44>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6613      	str	r3, [r2, #96]	; 0x60
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x44>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x44>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_ADC_MspInit+0x44>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d113      	bne.n	8000fb2 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_ADC_MspInit+0x48>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <HAL_ADC_MspInit+0x48>)
 8000f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_ADC_MspInit+0x48>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2012      	movs	r0, #18
 8000fa8:	f001 fda5 	bl	8002af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000fac:	2012      	movs	r0, #18
 8000fae:	f001 fdbe 	bl	8002b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	50040000 	.word	0x50040000
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8c0 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <ADC1_IRQHandler+0x10>)
 800101e:	f000 fd51 	bl	8001ac4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000038 	.word	0x20000038

0800102c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <SystemInit+0x64>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <SystemInit+0x64>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <SystemInit+0x68>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a13      	ldr	r2, [pc, #76]	; (8001094 <SystemInit+0x68>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <SystemInit+0x68>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <SystemInit+0x68>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <SystemInit+0x68>)
 8001058:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800105c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001060:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <SystemInit+0x68>)
 8001064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001068:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <SystemInit+0x68>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <SystemInit+0x68>)
 8001070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <SystemInit+0x68>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SystemInit+0x64>)
 800107e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001082:	609a      	str	r2, [r3, #8]
#endif
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	40021000 	.word	0x40021000

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800109c:	f7ff ffc6 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010a2:	e003      	b.n	80010ac <LoopCopyDataInit>

080010a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010aa:	3104      	adds	r1, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80010b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010b4:	d3f6      	bcc.n	80010a4 <CopyDataInit>
	ldr	r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010b8:	e002      	b.n	80010c0 <LoopFillZerobss>

080010ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010bc:	f842 3b04 	str.w	r3, [r2], #4

080010c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <LoopForever+0x16>)
	cmp	r2, r3
 80010c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010c4:	d3f9      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f003 fb93 	bl	80047f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff fcb9 	bl	8000a40 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010d0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80010d4:	080048a8 	.word	0x080048a8
	ldr	r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010dc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80010e0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80010e4:	200000a8 	.word	0x200000a8

080010e8 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <AES_IRQHandler>

080010ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f001 fcf3 	bl	8002ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f80e 	bl	800111c <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	e001      	b.n	8001110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800110c:	f7ff ff10 	bl	8000f30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001110:	79fb      	ldrb	r3, [r7, #7]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_InitTick+0x6c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d023      	beq.n	8001178 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_InitTick+0x70>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_InitTick+0x6c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fcff 	bl	8002b4a <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10f      	bne.n	8001172 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d809      	bhi.n	800116c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f001 fcc9 	bl	8002af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_InitTick+0x74>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e007      	b.n	800117c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e004      	b.n	800117c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e001      	b.n	800117c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000004 	.word	0x20000004
 8001190:	20000008 	.word	0x20000008

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000000c 	.word	0x2000000c
 80011b8:	200000a4 	.word	0x200000a4

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200000a4 	.word	0x200000a4

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_Delay+0x40>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000000c 	.word	0x2000000c

08001218 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	609a      	str	r2, [r3, #8]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3360      	adds	r3, #96	; 0x60
 8001292:	461a      	mov	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <LL_ADC_SetOffset+0x44>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	03fff000 	.word	0x03fff000

080012c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3360      	adds	r3, #96	; 0x60
 80012d6:	461a      	mov	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3360      	adds	r3, #96	; 0x60
 8001304:	461a      	mov	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	431a      	orrs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	615a      	str	r2, [r3, #20]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001376:	b480      	push	{r7}
 8001378:	b087      	sub	sp, #28
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3330      	adds	r3, #48	; 0x30
 8001386:	461a      	mov	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	211f      	movs	r1, #31
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0e9b      	lsrs	r3, r3, #26
 80013ae:	f003 011f 	and.w	r1, r3, #31
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013c2:	bf00      	nop
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3314      	adds	r3, #20
 8001404:	461a      	mov	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	0e5b      	lsrs	r3, r3, #25
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	0d1b      	lsrs	r3, r3, #20
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	2107      	movs	r1, #7
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	401a      	ands	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	0d1b      	lsrs	r3, r3, #20
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001464:	43db      	mvns	r3, r3
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0318 	and.w	r3, r3, #24
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001470:	40d9      	lsrs	r1, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	400b      	ands	r3, r1
 8001476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147a:	431a      	orrs	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	0007ffff 	.word	0x0007ffff

08001494 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6093      	str	r3, [r2, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800151c:	d101      	bne.n	8001522 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800156c:	f043 0202 	orr.w	r2, r3, #2
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <LL_ADC_IsEnabled+0x18>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <LL_ADC_IsEnabled+0x1a>
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d101      	bne.n	80015be <LL_ADC_IsDisableOngoing+0x18>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_IsDisableOngoing+0x1a>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015e0:	f043 0204 	orr.w	r2, r3, #4
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b04      	cmp	r3, #4
 8001606:	d101      	bne.n	800160c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b08      	cmp	r3, #8
 800162c:	d101      	bne.n	8001632 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e12d      	b.n	80018b6 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fc85 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff19 	bl	80014b8 <LL_ADC_IsDeepPowerDownEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff feff 	bl	8001494 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff34 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d113      	bne.n	80016ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff18 	bl	80014e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016b0:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <HAL_ADC_Init+0x280>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	099b      	lsrs	r3, r3, #6
 80016b6:	4a83      	ldr	r2, [pc, #524]	; (80018c4 <HAL_ADC_Init+0x284>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c0:	e002      	b.n	80016c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f9      	bne.n	80016c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff18 	bl	8001508 <LL_ADC_IsInternalRegulatorEnabled>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f043 0210 	orr.w	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff78 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001704:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 80c8 	bne.w	80018a4 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 80c4 	bne.w	80018a4 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001724:	f043 0202 	orr.w	r2, r3, #2
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff25 	bl	8001580 <LL_ADC_IsEnabled>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10b      	bne.n	8001754 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800173c:	4862      	ldr	r0, [pc, #392]	; (80018c8 <HAL_ADC_Init+0x288>)
 800173e:	f7ff ff1f 	bl	8001580 <LL_ADC_IsEnabled>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4619      	mov	r1, r3
 800174e:	485f      	ldr	r0, [pc, #380]	; (80018cc <HAL_ADC_Init+0x28c>)
 8001750:	f7ff fd62 	bl	8001218 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e5b      	ldrb	r3, [r3, #25]
 8001758:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800175e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001764:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800176a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d106      	bne.n	8001790 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	3b01      	subs	r3, #1
 8001788:	045b      	lsls	r3, r3, #17
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d009      	beq.n	80017ac <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_ADC_Init+0x290>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	430b      	orrs	r3, r1
 80017be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff15 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 80017ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff22 	bl	800161a <LL_ADC_INJ_IsConversionOngoing>
 80017d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d140      	bne.n	8001860 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d13d      	bne.n	8001860 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
 80017ec:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017ee:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001806:	f023 0306 	bic.w	r3, r3, #6
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	69b9      	ldr	r1, [r7, #24]
 8001810:	430b      	orrs	r3, r1
 8001812:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800181a:	2b01      	cmp	r3, #1
 800181c:	d118      	bne.n	8001850 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001834:	4311      	orrs	r1, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001840:	430a      	orrs	r2, r1
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	e007      	b.n	8001860 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f023 010f 	bic.w	r1, r3, #15
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	1e5a      	subs	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
 8001880:	e007      	b.n	8001892 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 020f 	bic.w	r2, r2, #15
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	659a      	str	r2, [r3, #88]	; 0x58
 80018a2:	e007      	b.n	80018b4 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f043 0210 	orr.w	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000004 	.word	0x20000004
 80018c4:	053e2d63 	.word	0x053e2d63
 80018c8:	50040000 	.word	0x50040000
 80018cc:	50040300 	.word	0x50040300
 80018d0:	fff0c007 	.word	0xfff0c007

080018d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fe87 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d14f      	bne.n	800198c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Start+0x26>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e04b      	b.n	8001992 <HAL_ADC_Start+0xbe>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 feaa 	bl	800265c <ADC_Enable>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d137      	bne.n	8001982 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001932:	d106      	bne.n	8001942 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	f023 0206 	bic.w	r2, r3, #6
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001940:	e002      	b.n	8001948 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	221c      	movs	r2, #28
 800194e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800196e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fe26 	bl	80015cc <LL_ADC_REG_StartConversion>
 8001980:	e006      	b.n	8001990 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800198a:	e001      	b.n	8001990 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800198c:	2302      	movs	r3, #2
 800198e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d102      	bne.n	80019b2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019ac:	2308      	movs	r3, #8
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e010      	b.n	80019d4 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	f043 0220 	orr.w	r2, r3, #32
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e068      	b.n	8001aa2 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80019d0:	2304      	movs	r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019d4:	f7ff fbf2 	bl	80011bc <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019da:	e01a      	b.n	8001a12 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e2:	d016      	beq.n	8001a12 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019e4:	f7ff fbea 	bl	80011bc <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d302      	bcc.n	80019fa <HAL_ADC_PollForConversion+0x60>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10b      	bne.n	8001a12 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f043 0204 	orr.w	r2, r3, #4
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e047      	b.n	8001aa2 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0dd      	beq.n	80019dc <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fc8d 	bl	8001350 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01c      	beq.n	8001a76 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7e5b      	ldrb	r3, [r3, #25]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d118      	bne.n	8001a76 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d111      	bne.n	8001a76 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d104      	bne.n	8001a8e <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2208      	movs	r2, #8
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e008      	b.n	8001aa0 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d103      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d017      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x56>
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d012      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 ff0c 	bl	800292a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2202      	movs	r2, #2
 8001b18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x6a>
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d05e      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d059      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fbf6 	bl	8001350 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d03e      	beq.n	8001be8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d135      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d12e      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fd30 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11a      	bne.n	8001bd0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 020c 	bic.w	r2, r2, #12
 8001ba8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d112      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	659a      	str	r2, [r3, #88]	; 0x58
 8001bce:	e00b      	b.n	8001be8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f91f 	bl	8001e2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x146>
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d072      	beq.n	8001cfa <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d06d      	beq.n	8001cfa <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fbc7 	bl	80013ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c40:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fb82 	bl	8001350 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c4c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10c      	bne.n	8001c76 <HAL_ADC_IRQHandler+0x1b2>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d142      	bne.n	8001cec <HAL_ADC_IRQHandler+0x228>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d03f      	beq.n	8001cec <HAL_ADC_IRQHandler+0x228>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d13a      	bne.n	8001cec <HAL_ADC_IRQHandler+0x228>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c80:	2b40      	cmp	r3, #64	; 0x40
 8001c82:	d133      	bne.n	8001cec <HAL_ADC_IRQHandler+0x228>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d12e      	bne.n	8001cec <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fcc1 	bl	800161a <LL_ADC_INJ_IsConversionOngoing>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11a      	bne.n	8001cd4 <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d112      	bne.n	8001cec <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	f043 0201 	orr.w	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8001cd2:	e00b      	b.n	8001cec <HAL_ADC_IRQHandler+0x228>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f043 0210 	orr.w	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fdf4 	bl	80028da <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2260      	movs	r2, #96	; 0x60
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d011      	beq.n	8001d28 <HAL_ADC_IRQHandler+0x264>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f890 	bl	8001e40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x294>
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fdda 	bl	8002902 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d012      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x2c4>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fdcc 	bl	8002916 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d02a      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x324>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d025      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	e008      	b.n	8001dbc <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10e      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	f043 0202 	orr.w	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f83a 	bl	8001e54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2210      	movs	r2, #16
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d018      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x360>
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	f043 0208 	orr.w	r2, r3, #8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fd65 	bl	80028ee <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0b6      	sub	sp, #216	; 0xd8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x22>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e3d4      	b.n	8002634 <HAL_ADC_ConfigChannel+0x7cc>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fbac 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 83b9 	bne.w	8002616 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d824      	bhi.n	8001ef6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	3b02      	subs	r3, #2
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d81b      	bhi.n	8001eee <HAL_ADC_ConfigChannel+0x86>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <HAL_ADC_ConfigChannel+0x54>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001ed5 	.word	0x08001ed5
 8001ec4:	08001edd 	.word	0x08001edd
 8001ec8:	08001ee5 	.word	0x08001ee5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	220c      	movs	r2, #12
 8001ed0:	605a      	str	r2, [r3, #4]
          break;
 8001ed2:	e011      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2212      	movs	r2, #18
 8001ed8:	605a      	str	r2, [r3, #4]
          break;
 8001eda:	e00d      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2218      	movs	r2, #24
 8001ee0:	605a      	str	r2, [r3, #4]
          break;
 8001ee2:	e009      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eea:	605a      	str	r2, [r3, #4]
          break;
 8001eec:	e004      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2206      	movs	r2, #6
 8001ef2:	605a      	str	r2, [r3, #4]
          break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ef6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	f7ff fa36 	bl	8001376 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fb70 	bl	80015f4 <LL_ADC_REG_IsConversionOngoing>
 8001f14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fb7c 	bl	800161a <LL_ADC_INJ_IsConversionOngoing>
 8001f22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 81c1 	bne.w	80022b2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f040 81bc 	bne.w	80022b2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f42:	d10f      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7ff fa50 	bl	80013f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff f9e4 	bl	800132a <LL_ADC_SetSamplingTimeCommonConfig>
 8001f62:	e00e      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f7ff fa3f 	bl	80013f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f9d4 	bl	800132a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d00a      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6919      	ldr	r1, [r3, #16]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fb4:	f7ff f964 	bl	8001280 <LL_ADC_SetOffset>
 8001fb8:	e17b      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f981 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x17e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f976 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	0e9b      	lsrs	r3, r3, #26
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	e01e      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1bc>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff f96b 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002004:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800200c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1d4>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	e018      	b.n	800206e <HAL_ADC_ConfigChannel+0x206>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e004      	b.n	800206e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800206e:	429a      	cmp	r2, r3
 8002070:	d106      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f93a 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f91e 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x244>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2101      	movs	r1, #1
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f913 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	0e9b      	lsrs	r3, r3, #26
 80020a6:	f003 021f 	and.w	r2, r3, #31
 80020aa:	e01e      	b.n	80020ea <HAL_ADC_ConfigChannel+0x282>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f908 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80020ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e004      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80020de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x29a>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	e018      	b.n	8002134 <HAL_ADC_ConfigChannel+0x2cc>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800211a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800211e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e004      	b.n	8002134 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800212a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002134:	429a      	cmp	r2, r3
 8002136:	d106      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	2101      	movs	r1, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff f8d7 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2102      	movs	r1, #2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff f8bb 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10a      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x30a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2102      	movs	r1, #2
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f8b0 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	0e9b      	lsrs	r3, r3, #26
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	e01e      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x348>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2102      	movs	r1, #2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff f8a5 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002190:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e004      	b.n	80021ae <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80021a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x360>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0e9b      	lsrs	r3, r3, #26
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	e016      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x38e>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e004      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80021ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f876 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2103      	movs	r1, #3
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f85a 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x3cc>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2103      	movs	r1, #3
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f84f 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	e017      	b.n	8002264 <HAL_ADC_ConfigChannel+0x3fc>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2103      	movs	r1, #3
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f844 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800224c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800224e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e003      	b.n	8002262 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800225a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_ConfigChannel+0x414>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	e011      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x438>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800228a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800228c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800228e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d106      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2103      	movs	r1, #3
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f821 	bl	80012f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f962 	bl	8001580 <LL_ADC_IsEnabled>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 8140 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f7ff f8bb 	bl	800144c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4a8f      	ldr	r2, [pc, #572]	; (8002518 <HAL_ADC_ConfigChannel+0x6b0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	f040 8131 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_ADC_ConfigChannel+0x4a2>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	3301      	adds	r3, #1
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2b09      	cmp	r3, #9
 8002300:	bf94      	ite	ls
 8002302:	2301      	movls	r3, #1
 8002304:	2300      	movhi	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e019      	b.n	800233e <HAL_ADC_ConfigChannel+0x4d6>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800231a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800231c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e003      	b.n	800232e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2b09      	cmp	r3, #9
 8002336:	bf94      	ite	ls
 8002338:	2301      	movls	r3, #1
 800233a:	2300      	movhi	r3, #0
 800233c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233e:	2b00      	cmp	r3, #0
 8002340:	d079      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_ADC_ConfigChannel+0x4f6>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	3301      	adds	r3, #1
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235c:	e015      	b.n	800238a <HAL_ADC_ConfigChannel+0x522>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800236c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e003      	b.n	8002382 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3301      	adds	r3, #1
 8002384:	069b      	lsls	r3, r3, #26
 8002386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x542>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	0e9b      	lsrs	r3, r3, #26
 800239c:	3301      	adds	r3, #1
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	e017      	b.n	80023da <HAL_ADC_ConfigChannel+0x572>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e003      	b.n	80023ce <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80023c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	ea42 0103 	orr.w	r1, r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x598>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	3301      	adds	r3, #1
 80023f2:	f003 021f 	and.w	r2, r3, #31
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	e018      	b.n	8002432 <HAL_ADC_ConfigChannel+0x5ca>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002418:	2320      	movs	r3, #32
 800241a:	e003      	b.n	8002424 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f003 021f 	and.w	r2, r3, #31
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002432:	430b      	orrs	r3, r1
 8002434:	e081      	b.n	800253a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x5ea>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	3301      	adds	r3, #1
 800244a:	069b      	lsls	r3, r3, #26
 800244c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002450:	e015      	b.n	800247e <HAL_ADC_ConfigChannel+0x616>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e003      	b.n	8002476 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	069b      	lsls	r3, r3, #26
 800247a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_ADC_ConfigChannel+0x636>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	3301      	adds	r3, #1
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	e017      	b.n	80024ce <HAL_ADC_ConfigChannel+0x666>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	61fb      	str	r3, [r7, #28]
  return result;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e003      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	ea42 0103 	orr.w	r1, r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x692>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	3301      	adds	r3, #1
 80024e6:	f003 021f 	and.w	r2, r3, #31
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	051b      	lsls	r3, r3, #20
 80024f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f8:	e01e      	b.n	8002538 <HAL_ADC_ConfigChannel+0x6d0>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	613b      	str	r3, [r7, #16]
  return result;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e006      	b.n	8002524 <HAL_ADC_ConfigChannel+0x6bc>
 8002516:	bf00      	nop
 8002518:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 021f 	and.w	r2, r3, #31
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	3b1e      	subs	r3, #30
 8002532:	051b      	lsls	r3, r3, #20
 8002534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002538:	430b      	orrs	r3, r1
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6892      	ldr	r2, [r2, #8]
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe ff58 	bl	80013f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b3c      	ldr	r3, [pc, #240]	; (800263c <HAL_ADC_ConfigChannel+0x7d4>)
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d06b      	beq.n	8002628 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002550:	483b      	ldr	r0, [pc, #236]	; (8002640 <HAL_ADC_ConfigChannel+0x7d8>)
 8002552:	f7fe fe87 	bl	8001264 <LL_ADC_GetCommonPathInternalCh>
 8002556:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a39      	ldr	r2, [pc, #228]	; (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d126      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d120      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a34      	ldr	r2, [pc, #208]	; (8002648 <HAL_ADC_ConfigChannel+0x7e0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d156      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800257e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002582:	4619      	mov	r1, r3
 8002584:	482e      	ldr	r0, [pc, #184]	; (8002640 <HAL_ADC_ConfigChannel+0x7d8>)
 8002586:	f7fe fe5a 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <HAL_ADC_ConfigChannel+0x7e4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	099b      	lsrs	r3, r3, #6
 8002590:	4a2f      	ldr	r2, [pc, #188]	; (8002650 <HAL_ADC_ConfigChannel+0x7e8>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	099a      	lsrs	r2, r3, #6
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025a2:	e002      	b.n	80025aa <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f9      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b0:	e03a      	b.n	8002628 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a27      	ldr	r2, [pc, #156]	; (8002654 <HAL_ADC_ConfigChannel+0x7ec>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d113      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x77c>
 80025bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1e      	ldr	r2, [pc, #120]	; (8002648 <HAL_ADC_ConfigChannel+0x7e0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d12a      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025da:	4619      	mov	r1, r3
 80025dc:	4818      	ldr	r0, [pc, #96]	; (8002640 <HAL_ADC_ConfigChannel+0x7d8>)
 80025de:	f7fe fe2e 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e2:	e021      	b.n	8002628 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <HAL_ADC_ConfigChannel+0x7f0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11c      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <HAL_ADC_ConfigChannel+0x7e0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d111      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800260c:	4619      	mov	r1, r3
 800260e:	480c      	ldr	r0, [pc, #48]	; (8002640 <HAL_ADC_ConfigChannel+0x7d8>)
 8002610:	f7fe fe15 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
 8002614:	e008      	b.n	8002628 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002630:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002634:	4618      	mov	r0, r3
 8002636:	37d8      	adds	r7, #216	; 0xd8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	80080000 	.word	0x80080000
 8002640:	50040300 	.word	0x50040300
 8002644:	c7520000 	.word	0xc7520000
 8002648:	50040000 	.word	0x50040000
 800264c:	20000004 	.word	0x20000004
 8002650:	053e2d63 	.word	0x053e2d63
 8002654:	cb840000 	.word	0xcb840000
 8002658:	80000001 	.word	0x80000001

0800265c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe ff89 	bl	8001580 <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d146      	bne.n	8002702 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <ADC_Enable+0xb0>)
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	f043 0210 	orr.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e032      	b.n	8002704 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe ff44 	bl	8001530 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026a8:	f7fe fd88 	bl	80011bc <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ae:	e021      	b.n	80026f4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe ff63 	bl	8001580 <LL_ADC_IsEnabled>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe ff33 	bl	8001530 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026ca:	f7fe fd77 	bl	80011bc <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d90d      	bls.n	80026f4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	f043 0210 	orr.w	r2, r3, #16
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d1d6      	bne.n	80026b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	8000003f 	.word	0x8000003f

08002710 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe ff42 	bl	80015a6 <LL_ADC_IsDisableOngoing>
 8002722:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe ff29 	bl	8001580 <LL_ADC_IsEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d040      	beq.n	80027b6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d13d      	bne.n	80027b6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030d 	and.w	r3, r3, #13
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10c      	bne.n	8002762 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe ff03 	bl	8001558 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2203      	movs	r2, #3
 8002758:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800275a:	f7fe fd2f 	bl	80011bc <HAL_GetTick>
 800275e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002760:	e022      	b.n	80027a8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	f043 0210 	orr.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e01c      	b.n	80027b8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800277e:	f7fe fd1d 	bl	80011bc <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d90d      	bls.n	80027a8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	f043 0210 	orr.w	r2, r3, #16
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e007      	b.n	80027b8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e3      	bne.n	800277e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <LL_ADC_StartCalibration>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80027d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027dc:	4313      	orrs	r3, r2
 80027de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	609a      	str	r2, [r3, #8]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_IsCalibrationOnGoing>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002806:	d101      	bne.n	800280c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADCEx_Calibration_Start+0x1c>
 8002832:	2302      	movs	r3, #2
 8002834:	e04d      	b.n	80028d2 <HAL_ADCEx_Calibration_Start+0xb8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ff66 	bl	8002710 <ADC_Disable>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d136      	bne.n	80028bc <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002856:	f023 0302 	bic.w	r3, r3, #2
 800285a:	f043 0202 	orr.w	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ffa9 	bl	80027c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800286e:	e014      	b.n	800289a <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	3301      	adds	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800287c:	d30d      	bcc.n	800289a <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f023 0312 	bic.w	r3, r3, #18
 8002886:	f043 0210 	orr.w	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e01b      	b.n	80028d2 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ffa7 	bl	80027f2 <LL_ADC_IsCalibrationOnGoing>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1e2      	bne.n	8002870 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	f023 0303 	bic.w	r3, r3, #3
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	659a      	str	r2, [r3, #88]	; 0x58
 80028ba:	e005      	b.n	80028c8 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f043 0210 	orr.w	r2, r3, #16
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800296c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002972:	4a04      	ldr	r2, [pc, #16]	; (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	60d3      	str	r3, [r2, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <__NVIC_GetPriorityGrouping+0x18>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	f003 0307 	and.w	r3, r3, #7
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	db0b      	blt.n	80029ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	4907      	ldr	r1, [pc, #28]	; (80029dc <__NVIC_EnableIRQ+0x38>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	2001      	movs	r0, #1
 80029c6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000e100 	.word	0xe000e100

080029e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	db0a      	blt.n	8002a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	490c      	ldr	r1, [pc, #48]	; (8002a2c <__NVIC_SetPriority+0x4c>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a08:	e00a      	b.n	8002a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <__NVIC_SetPriority+0x50>)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	3b04      	subs	r3, #4
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	761a      	strb	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf28      	it	cs
 8002a52:	2304      	movcs	r3, #4
 8002a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d902      	bls.n	8002a64 <NVIC_EncodePriority+0x30>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3b03      	subs	r3, #3
 8002a62:	e000      	b.n	8002a66 <NVIC_EncodePriority+0x32>
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	401a      	ands	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	4313      	orrs	r3, r2
         );
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aac:	d301      	bcc.n	8002ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00f      	b.n	8002ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <SysTick_Config+0x40>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aba:	210f      	movs	r1, #15
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f7ff ff8e 	bl	80029e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <SysTick_Config+0x40>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <SysTick_Config+0x40>)
 8002acc:	2207      	movs	r2, #7
 8002ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	e000e010 	.word	0xe000e010

08002ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff29 	bl	8002940 <__NVIC_SetPriorityGrouping>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4603      	mov	r3, r0
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b08:	f7ff ff3e 	bl	8002988 <__NVIC_GetPriorityGrouping>
 8002b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7ff ff8e 	bl	8002a34 <NVIC_EncodePriority>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff5d 	bl	80029e0 <__NVIC_SetPriority>
}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff31 	bl	80029a4 <__NVIC_EnableIRQ>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff ffa2 	bl	8002a9c <SysTick_Config>
 8002b58:	4603      	mov	r3, r0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b72:	e166      	b.n	8002e42 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8158 	beq.w	8002e3c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d00b      	beq.n	8002bac <HAL_GPIO_Init+0x48>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d007      	beq.n	8002bac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ba0:	2b11      	cmp	r3, #17
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d130      	bne.n	8002c0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002be2:	2201      	movs	r2, #1
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 0201 	and.w	r2, r3, #1
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0xea>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b12      	cmp	r3, #18
 8002c4c:	d123      	bne.n	8002c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	6939      	ldr	r1, [r7, #16]
 8002c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0203 	and.w	r2, r3, #3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80b2 	beq.w	8002e3c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd8:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <HAL_GPIO_Init+0x2fc>)
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	4a60      	ldr	r2, [pc, #384]	; (8002e60 <HAL_GPIO_Init+0x2fc>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	; (8002e60 <HAL_GPIO_Init+0x2fc>)
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cf0:	4a5c      	ldr	r2, [pc, #368]	; (8002e64 <HAL_GPIO_Init+0x300>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d1a:	d02b      	beq.n	8002d74 <HAL_GPIO_Init+0x210>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a52      	ldr	r2, [pc, #328]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d025      	beq.n	8002d70 <HAL_GPIO_Init+0x20c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a51      	ldr	r2, [pc, #324]	; (8002e6c <HAL_GPIO_Init+0x308>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d01f      	beq.n	8002d6c <HAL_GPIO_Init+0x208>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a50      	ldr	r2, [pc, #320]	; (8002e70 <HAL_GPIO_Init+0x30c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d019      	beq.n	8002d68 <HAL_GPIO_Init+0x204>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a4f      	ldr	r2, [pc, #316]	; (8002e74 <HAL_GPIO_Init+0x310>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_GPIO_Init+0x200>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a4e      	ldr	r2, [pc, #312]	; (8002e78 <HAL_GPIO_Init+0x314>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00d      	beq.n	8002d60 <HAL_GPIO_Init+0x1fc>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a4d      	ldr	r2, [pc, #308]	; (8002e7c <HAL_GPIO_Init+0x318>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_Init+0x1f8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a4c      	ldr	r2, [pc, #304]	; (8002e80 <HAL_GPIO_Init+0x31c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_GPIO_Init+0x1f4>
 8002d54:	2307      	movs	r3, #7
 8002d56:	e00e      	b.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d58:	2308      	movs	r3, #8
 8002d5a:	e00c      	b.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d5c:	2306      	movs	r3, #6
 8002d5e:	e00a      	b.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d60:	2305      	movs	r3, #5
 8002d62:	e008      	b.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e006      	b.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e004      	b.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e002      	b.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d74:	2300      	movs	r3, #0
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d86:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_GPIO_Init+0x300>)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d94:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002db8:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de2:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002de8:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e36:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f47f ae91 	bne.w	8002b74 <HAL_GPIO_Init+0x10>
  }
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000
 8002e68:	48000400 	.word	0x48000400
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	48000c00 	.word	0x48000c00
 8002e74:	48001000 	.word	0x48001000
 8002e78:	48001400 	.word	0x48001400
 8002e7c:	48001800 	.word	0x48001800
 8002e80:	48001c00 	.word	0x48001c00
 8002e84:	40010400 	.word	0x40010400

08002e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	887b      	ldrh	r3, [r7, #2]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e001      	b.n	8002eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec8:	787b      	ldrb	r3, [r7, #1]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ed4:	e002      	b.n	8002edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4013      	ands	r3, r2
 8002f00:	041a      	lsls	r2, r3, #16
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	43d9      	mvns	r1, r3
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	400b      	ands	r3, r1
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	619a      	str	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2c:	d102      	bne.n	8002f34 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f32:	e00b      	b.n	8002f4c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f42:	d102      	bne.n	8002f4a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f48:	e000      	b.n	8002f4c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f4a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40007000 	.word	0x40007000

08002f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d141      	bne.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f6a:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f76:	d131      	bne.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f78:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7e:	4a46      	ldr	r2, [pc, #280]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f88:	4b43      	ldr	r3, [pc, #268]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f90:	4a41      	ldr	r2, [pc, #260]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f98:	4b40      	ldr	r3, [pc, #256]	; (800309c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2232      	movs	r2, #50	; 0x32
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	4a3f      	ldr	r2, [pc, #252]	; (80030a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	0c9b      	lsrs	r3, r3, #18
 8002faa:	3301      	adds	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fae:	e002      	b.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d102      	bne.n	8002fca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f2      	bne.n	8002fb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd6:	d158      	bne.n	800308a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e057      	b.n	800308c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe2:	4a2d      	ldr	r2, [pc, #180]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fec:	e04d      	b.n	800308a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff4:	d141      	bne.n	800307a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003002:	d131      	bne.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300a:	4a23      	ldr	r2, [pc, #140]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800301c:	4a1e      	ldr	r2, [pc, #120]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2232      	movs	r2, #50	; 0x32
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	0c9b      	lsrs	r3, r3, #18
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800303a:	e002      	b.n	8003042 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3b01      	subs	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304e:	d102      	bne.n	8003056 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f2      	bne.n	800303c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003062:	d112      	bne.n	800308a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e011      	b.n	800308c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003078:	e007      	b.n	800308a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003082:	4a05      	ldr	r2, [pc, #20]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003084:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003088:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40007000 	.word	0x40007000
 800309c:	20000004 	.word	0x20000004
 80030a0:	431bde83 	.word	0x431bde83

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f000 bc16 	b.w	80038e4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b8:	4ba0      	ldr	r3, [pc, #640]	; (800333c <HAL_RCC_OscConfig+0x298>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c2:	4b9e      	ldr	r3, [pc, #632]	; (800333c <HAL_RCC_OscConfig+0x298>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80e4 	beq.w	80032a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <HAL_RCC_OscConfig+0x4c>
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	f040 808b 	bne.w	80031fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	f040 8087 	bne.w	80031fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030f0:	4b92      	ldr	r3, [pc, #584]	; (800333c <HAL_RCC_OscConfig+0x298>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_OscConfig+0x64>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e3ed      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1a      	ldr	r2, [r3, #32]
 800310c:	4b8b      	ldr	r3, [pc, #556]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <HAL_RCC_OscConfig+0x7e>
 8003118:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003120:	e005      	b.n	800312e <HAL_RCC_OscConfig+0x8a>
 8003122:	4b86      	ldr	r3, [pc, #536]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800312e:	4293      	cmp	r3, r2
 8003130:	d223      	bcs.n	800317a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fd90 	bl	8003c5c <RCC_SetFlashLatencyFromMSIRange>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e3ce      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003146:	4b7d      	ldr	r3, [pc, #500]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a7c      	ldr	r2, [pc, #496]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800314c:	f043 0308 	orr.w	r3, r3, #8
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b7a      	ldr	r3, [pc, #488]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4977      	ldr	r1, [pc, #476]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003164:	4b75      	ldr	r3, [pc, #468]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	4972      	ldr	r1, [pc, #456]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
 8003178:	e025      	b.n	80031c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317a:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6f      	ldr	r2, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003180:	f043 0308 	orr.w	r3, r3, #8
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b6d      	ldr	r3, [pc, #436]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	496a      	ldr	r1, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003198:	4b68      	ldr	r3, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	4965      	ldr	r1, [pc, #404]	; (800333c <HAL_RCC_OscConfig+0x298>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fd50 	bl	8003c5c <RCC_SetFlashLatencyFromMSIRange>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e38e      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031c6:	f000 fcbf 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 80031ca:	4601      	mov	r1, r0
 80031cc:	4b5b      	ldr	r3, [pc, #364]	; (800333c <HAL_RCC_OscConfig+0x298>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	4a5a      	ldr	r2, [pc, #360]	; (8003340 <HAL_RCC_OscConfig+0x29c>)
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	fa21 f303 	lsr.w	r3, r1, r3
 80031e2:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_OscConfig+0x2a0>)
 80031e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031e6:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_RCC_OscConfig+0x2a4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd ff96 	bl	800111c <HAL_InitTick>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d052      	beq.n	80032a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	e372      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d032      	beq.n	800326c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003206:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a4c      	ldr	r2, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003212:	f7fd ffd3 	bl	80011bc <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800321a:	f7fd ffcf 	bl	80011bc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e35b      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003238:	4b40      	ldr	r3, [pc, #256]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3f      	ldr	r2, [pc, #252]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800323e:	f043 0308 	orr.w	r3, r3, #8
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b3d      	ldr	r3, [pc, #244]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	493a      	ldr	r1, [pc, #232]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003256:	4b39      	ldr	r3, [pc, #228]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	4935      	ldr	r1, [pc, #212]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
 800326a:	e01a      	b.n	80032a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800326c:	4b33      	ldr	r3, [pc, #204]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a32      	ldr	r2, [pc, #200]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003278:	f7fd ffa0 	bl	80011bc <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003280:	f7fd ff9c 	bl	80011bc <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e328      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003292:	4b2a      	ldr	r3, [pc, #168]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x1dc>
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d073      	beq.n	8003396 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_OscConfig+0x21c>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d10e      	bne.n	80032d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d10b      	bne.n	80032d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_RCC_OscConfig+0x298>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d063      	beq.n	8003394 <HAL_RCC_OscConfig+0x2f0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d15f      	bne.n	8003394 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e305      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d106      	bne.n	80032f0 <HAL_RCC_OscConfig+0x24c>
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_RCC_OscConfig+0x298>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a15      	ldr	r2, [pc, #84]	; (800333c <HAL_RCC_OscConfig+0x298>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e01d      	b.n	800332c <HAL_RCC_OscConfig+0x288>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x270>
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_OscConfig+0x298>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a0f      	ldr	r2, [pc, #60]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a0c      	ldr	r2, [pc, #48]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0x288>
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a08      	ldr	r2, [pc, #32]	; (800333c <HAL_RCC_OscConfig+0x298>)
 800331a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a05      	ldr	r2, [pc, #20]	; (800333c <HAL_RCC_OscConfig+0x298>)
 8003326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd ff42 	bl	80011bc <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333a:	e010      	b.n	800335e <HAL_RCC_OscConfig+0x2ba>
 800333c:	40021000 	.word	0x40021000
 8003340:	08004860 	.word	0x08004860
 8003344:	20000004 	.word	0x20000004
 8003348:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fd ff36 	bl	80011bc <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e2c2      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335e:	4baf      	ldr	r3, [pc, #700]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x2a8>
 800336a:	e014      	b.n	8003396 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd ff26 	bl	80011bc <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003374:	f7fd ff22 	bl	80011bc <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e2ae      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003386:	4ba5      	ldr	r3, [pc, #660]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x2d0>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d060      	beq.n	8003464 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_OscConfig+0x310>
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d119      	bne.n	80033e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d116      	bne.n	80033e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b4:	4b99      	ldr	r3, [pc, #612]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_OscConfig+0x328>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e28b      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b93      	ldr	r3, [pc, #588]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	4990      	ldr	r1, [pc, #576]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033e0:	e040      	b.n	8003464 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d023      	beq.n	8003432 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ea:	4b8c      	ldr	r3, [pc, #560]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a8b      	ldr	r2, [pc, #556]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f6:	f7fd fee1 	bl	80011bc <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fe:	f7fd fedd 	bl	80011bc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e269      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003410:	4b82      	ldr	r3, [pc, #520]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341c:	4b7f      	ldr	r3, [pc, #508]	; (800361c <HAL_RCC_OscConfig+0x578>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	497c      	ldr	r1, [pc, #496]	; (800361c <HAL_RCC_OscConfig+0x578>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
 8003430:	e018      	b.n	8003464 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003432:	4b7a      	ldr	r3, [pc, #488]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a79      	ldr	r2, [pc, #484]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fd febd 	bl	80011bc <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003446:	f7fd feb9 	bl	80011bc <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e245      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003458:	4b70      	ldr	r3, [pc, #448]	; (800361c <HAL_RCC_OscConfig+0x578>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d03c      	beq.n	80034ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01c      	beq.n	80034b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003478:	4b68      	ldr	r3, [pc, #416]	; (800361c <HAL_RCC_OscConfig+0x578>)
 800347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347e:	4a67      	ldr	r2, [pc, #412]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003488:	f7fd fe98 	bl	80011bc <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003490:	f7fd fe94 	bl	80011bc <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e220      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a2:	4b5e      	ldr	r3, [pc, #376]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80034a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ef      	beq.n	8003490 <HAL_RCC_OscConfig+0x3ec>
 80034b0:	e01b      	b.n	80034ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b2:	4b5a      	ldr	r3, [pc, #360]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80034b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fd fe7b 	bl	80011bc <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fd fe77 	bl	80011bc <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e203      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034dc:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80034de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1ef      	bne.n	80034ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80a6 	beq.w	8003644 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f8:	2300      	movs	r3, #0
 80034fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034fc:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10d      	bne.n	8003524 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	4b44      	ldr	r3, [pc, #272]	; (800361c <HAL_RCC_OscConfig+0x578>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	4a43      	ldr	r2, [pc, #268]	; (800361c <HAL_RCC_OscConfig+0x578>)
 800350e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003512:	6593      	str	r3, [r2, #88]	; 0x58
 8003514:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003520:	2301      	movs	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003524:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <HAL_RCC_OscConfig+0x57c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d118      	bne.n	8003562 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003530:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCC_OscConfig+0x57c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <HAL_RCC_OscConfig+0x57c>)
 8003536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353c:	f7fd fe3e 	bl	80011bc <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003544:	f7fd fe3a 	bl	80011bc <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e1c6      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003556:	4b32      	ldr	r3, [pc, #200]	; (8003620 <HAL_RCC_OscConfig+0x57c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d108      	bne.n	800357c <HAL_RCC_OscConfig+0x4d8>
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <HAL_RCC_OscConfig+0x578>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	4a2a      	ldr	r2, [pc, #168]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800357a:	e024      	b.n	80035c6 <HAL_RCC_OscConfig+0x522>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d110      	bne.n	80035a6 <HAL_RCC_OscConfig+0x502>
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	4a24      	ldr	r2, [pc, #144]	; (800361c <HAL_RCC_OscConfig+0x578>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_RCC_OscConfig+0x578>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	4a20      	ldr	r2, [pc, #128]	; (800361c <HAL_RCC_OscConfig+0x578>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035a4:	e00f      	b.n	80035c6 <HAL_RCC_OscConfig+0x522>
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80035be:	f023 0304 	bic.w	r3, r3, #4
 80035c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fd fdf5 	bl	80011bc <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7fd fdf1 	bl	80011bc <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e17b      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_OscConfig+0x578>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ed      	beq.n	80035d6 <HAL_RCC_OscConfig+0x532>
 80035fa:	e01a      	b.n	8003632 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fd fdde 	bl	80011bc <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003602:	e00f      	b.n	8003624 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fd fdda 	bl	80011bc <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d906      	bls.n	8003624 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e164      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003624:	4ba8      	ldr	r3, [pc, #672]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e8      	bne.n	8003604 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003632:	7ffb      	ldrb	r3, [r7, #31]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003638:	4ba3      	ldr	r3, [pc, #652]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	4aa2      	ldr	r2, [pc, #648]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 800363e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003642:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03c      	beq.n	80036ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01c      	beq.n	8003692 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003658:	4b9b      	ldr	r3, [pc, #620]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 800365a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800365e:	4a9a      	ldr	r2, [pc, #616]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fd fda8 	bl	80011bc <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003670:	f7fd fda4 	bl	80011bc <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e130      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003682:	4b91      	ldr	r3, [pc, #580]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ef      	beq.n	8003670 <HAL_RCC_OscConfig+0x5cc>
 8003690:	e01b      	b.n	80036ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003692:	4b8d      	ldr	r3, [pc, #564]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003698:	4a8b      	ldr	r2, [pc, #556]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a2:	f7fd fd8b 	bl	80011bc <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036aa:	f7fd fd87 	bl	80011bc <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e113      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036bc:	4b82      	ldr	r3, [pc, #520]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80036be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ef      	bne.n	80036aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8107 	beq.w	80038e2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	2b02      	cmp	r3, #2
 80036da:	f040 80cb 	bne.w	8003874 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036de:	4b7a      	ldr	r3, [pc, #488]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d12c      	bne.n	800374c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	3b01      	subs	r3, #1
 80036fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d123      	bne.n	800374c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d11b      	bne.n	800374c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d113      	bne.n	800374c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	3b01      	subs	r3, #1
 8003732:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d109      	bne.n	800374c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	3b01      	subs	r3, #1
 8003746:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d06d      	beq.n	8003828 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d068      	beq.n	8003824 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003752:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d105      	bne.n	800376a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800375e:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0ba      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800376e:	4b56      	ldr	r3, [pc, #344]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a55      	ldr	r2, [pc, #340]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003778:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800377a:	f7fd fd1f 	bl	80011bc <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003782:	f7fd fd1b 	bl	80011bc <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0a7      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003794:	4b4c      	ldr	r3, [pc, #304]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a0:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	4b49      	ldr	r3, [pc, #292]	; (80038cc <HAL_RCC_OscConfig+0x828>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037b0:	3a01      	subs	r2, #1
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	4311      	orrs	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037ba:	0212      	lsls	r2, r2, #8
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037c2:	0852      	lsrs	r2, r2, #1
 80037c4:	3a01      	subs	r2, #1
 80037c6:	0552      	lsls	r2, r2, #21
 80037c8:	4311      	orrs	r1, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037ce:	0852      	lsrs	r2, r2, #1
 80037d0:	3a01      	subs	r2, #1
 80037d2:	0652      	lsls	r2, r2, #25
 80037d4:	4311      	orrs	r1, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037da:	06d2      	lsls	r2, r2, #27
 80037dc:	430a      	orrs	r2, r1
 80037de:	493a      	ldr	r1, [pc, #232]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037e4:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a37      	ldr	r2, [pc, #220]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037f0:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a34      	ldr	r2, [pc, #208]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037fc:	f7fd fcde 	bl	80011bc <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fd fcda 	bl	80011bc <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e066      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003816:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003822:	e05e      	b.n	80038e2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e05d      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003828:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d156      	bne.n	80038e2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003834:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 800383a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800384c:	f7fd fcb6 	bl	80011bc <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fd fcb2 	bl	80011bc <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e03e      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x7b0>
 8003872:	e036      	b.n	80038e2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d031      	beq.n	80038de <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003884:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4a0c      	ldr	r2, [pc, #48]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 8003898:	f023 0303 	bic.w	r3, r3, #3
 800389c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_OscConfig+0x824>)
 80038a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fd fc85 	bl	80011bc <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b4:	e00c      	b.n	80038d0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fd fc81 	bl	80011bc <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d905      	bls.n	80038d0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e00d      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
 80038c8:	40021000 	.word	0x40021000
 80038cc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_RCC_OscConfig+0x848>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ec      	bne.n	80038b6 <HAL_RCC_OscConfig+0x812>
 80038dc:	e001      	b.n	80038e2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3720      	adds	r7, #32
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40021000 	.word	0x40021000

080038f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e10f      	b.n	8003b28 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b89      	ldr	r3, [pc, #548]	; (8003b30 <HAL_RCC_ClockConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d910      	bls.n	8003938 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b86      	ldr	r3, [pc, #536]	; (8003b30 <HAL_RCC_ClockConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 020f 	bic.w	r2, r3, #15
 800391e:	4984      	ldr	r1, [pc, #528]	; (8003b30 <HAL_RCC_ClockConfig+0x240>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b82      	ldr	r3, [pc, #520]	; (8003b30 <HAL_RCC_ClockConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0f7      	b.n	8003b28 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8089 	beq.w	8003a58 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d133      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394e:	4b79      	ldr	r3, [pc, #484]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0e4      	b.n	8003b28 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800395e:	f000 f9d7 	bl	8003d10 <RCC_GetSysClockFreqFromPLLSource>
 8003962:	4602      	mov	r2, r0
 8003964:	4b74      	ldr	r3, [pc, #464]	; (8003b38 <HAL_RCC_ClockConfig+0x248>)
 8003966:	429a      	cmp	r2, r3
 8003968:	d955      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800396a:	4b72      	ldr	r3, [pc, #456]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003976:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397e:	4a6d      	ldr	r2, [pc, #436]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003984:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e044      	b.n	8003a16 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d03e      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x126>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d13a      	bne.n	8003a16 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039a0:	4b64      	ldr	r3, [pc, #400]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a8:	4a62      	ldr	r2, [pc, #392]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 80039aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e02f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039be:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d115      	bne.n	80039f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0ac      	b.n	8003b28 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039d6:	4b57      	ldr	r3, [pc, #348]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0a0      	b.n	8003b28 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039e6:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e098      	b.n	8003b28 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80039f6:	f000 f8a7 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b4e      	ldr	r3, [pc, #312]	; (8003b38 <HAL_RCC_ClockConfig+0x248>)
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d909      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a02:	4b4c      	ldr	r3, [pc, #304]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0a:	4a4a      	ldr	r2, [pc, #296]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f023 0203 	bic.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4944      	ldr	r1, [pc, #272]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a28:	f7fd fbc8 	bl	80011bc <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a30:	f7fd fbc4 	bl	80011bc <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e070      	b.n	8003b28 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 020c 	and.w	r2, r3, #12
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d1eb      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4930      	ldr	r1, [pc, #192]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b80      	cmp	r3, #128	; 0x80
 8003a7c:	d105      	bne.n	8003a8a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a88:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8a:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_RCC_ClockConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d210      	bcs.n	8003aba <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_RCC_ClockConfig+0x240>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 020f 	bic.w	r2, r3, #15
 8003aa0:	4923      	ldr	r1, [pc, #140]	; (8003b30 <HAL_RCC_ClockConfig+0x240>)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <HAL_RCC_ClockConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e036      	b.n	8003b28 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4918      	ldr	r1, [pc, #96]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae4:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4910      	ldr	r1, [pc, #64]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003af8:	f000 f826 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 8003afc:	4601      	mov	r1, r0
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_RCC_ClockConfig+0x244>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <HAL_RCC_ClockConfig+0x24c>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	fa21 f303 	lsr.w	r3, r1, r3
 8003b14:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <HAL_RCC_ClockConfig+0x250>)
 8003b16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_RCC_ClockConfig+0x254>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fd fafd 	bl	800111c <HAL_InitTick>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40022000 	.word	0x40022000
 8003b34:	40021000 	.word	0x40021000
 8003b38:	04c4b400 	.word	0x04c4b400
 8003b3c:	08004860 	.word	0x08004860
 8003b40:	20000004 	.word	0x20000004
 8003b44:	20000008 	.word	0x20000008

08003b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b56:	4b3d      	ldr	r3, [pc, #244]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b60:	4b3a      	ldr	r3, [pc, #232]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x34>
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	d121      	bne.n	8003bba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d11e      	bne.n	8003bba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b7c:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	e005      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b98:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ba4:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d102      	bne.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bcc:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d133      	bne.n	8003c3e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d002      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0xa4>
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCC_GetSysClockFreq+0xaa>
 8003bea:	e005      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bee:	617b      	str	r3, [r7, #20]
      break;
 8003bf0:	e005      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bf4:	617b      	str	r3, [r7, #20]
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	617b      	str	r3, [r7, #20]
      break;
 8003bfc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bfe:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	3301      	adds	r3, #1
 8003c0a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	fb02 f203 	mul.w	r2, r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	0e5b      	lsrs	r3, r3, #25
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3724      	adds	r7, #36	; 0x24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08004870 	.word	0x08004870
 8003c54:	00f42400 	.word	0x00f42400
 8003c58:	007a1200 	.word	0x007a1200

08003c5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c74:	f7ff f952 	bl	8002f1c <HAL_PWREx_GetVoltageRange>
 8003c78:	6178      	str	r0, [r7, #20]
 8003c7a:	e014      	b.n	8003ca6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	; 0x58
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c94:	f7ff f942 	bl	8002f1c <HAL_PWREx_GetVoltageRange>
 8003c98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cac:	d10b      	bne.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d913      	bls.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2ba0      	cmp	r3, #160	; 0xa0
 8003cb8:	d902      	bls.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cba:	2302      	movs	r3, #2
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e00d      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e00a      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cca:	d902      	bls.n	8003cd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003ccc:	2302      	movs	r3, #2
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	e004      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b70      	cmp	r3, #112	; 0x70
 8003cd6:	d101      	bne.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd8:	2301      	movs	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 020f 	bic.w	r2, r3, #15
 8003ce4:	4909      	ldr	r1, [pc, #36]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40022000 	.word	0x40022000

08003d10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d118      	bne.n	8003d58 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e005      	b.n	8003d4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d4e:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d002      	beq.n	8003d6e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003d6c:	e005      	b.n	8003d7a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d70:	613b      	str	r3, [r7, #16]
    break;
 8003d72:	e005      	b.n	8003d80 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d76:	613b      	str	r3, [r7, #16]
    break;
 8003d78:	e002      	b.n	8003d80 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	613b      	str	r3, [r7, #16]
    break;
 8003d7e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	fb02 f203 	mul.w	r2, r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	0e5b      	lsrs	r3, r3, #25
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	3301      	adds	r3, #1
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003dc0:	683b      	ldr	r3, [r7, #0]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08004870 	.word	0x08004870
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200

08003de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de8:	2300      	movs	r3, #0
 8003dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dec:	2300      	movs	r3, #0
 8003dee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d03d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d00b      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d804      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d015      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003e10:	e01d      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003e12:	2b60      	cmp	r3, #96	; 0x60
 8003e14:	d01e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d01c      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e1a:	e018      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1c:	4b86      	ldr	r3, [pc, #536]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a85      	ldr	r2, [pc, #532]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e28:	e015      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fafd 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e3a:	e00c      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3320      	adds	r3, #32
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fbe4 	bl	8004610 <RCCEx_PLLSAI2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	74fb      	strb	r3, [r7, #19]
      break;
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e5c:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e62:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6a:	4973      	ldr	r1, [pc, #460]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e72:	e001      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d042      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8c:	d00f      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e92:	d805      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d011      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9c:	d017      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003e9e:	e01f      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea4:	d01f      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eaa:	d01c      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003eac:	e018      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003eae:	4b62      	ldr	r3, [pc, #392]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4a61      	ldr	r2, [pc, #388]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eba:	e015      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fab4 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3320      	adds	r3, #32
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fb9b 	bl	8004610 <RCCEx_PLLSAI2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	74fb      	strb	r3, [r7, #19]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eee:	4b52      	ldr	r3, [pc, #328]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	494e      	ldr	r1, [pc, #312]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f04:	e001      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 809f 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f1c:	4b46      	ldr	r3, [pc, #280]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	4b41      	ldr	r3, [pc, #260]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	4a40      	ldr	r2, [pc, #256]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f5a:	f7fd f92f 	bl	80011bc <HAL_GetTick>
 8003f5e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f60:	e009      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f62:	f7fd f92b 	bl	80011bc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d902      	bls.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	74fb      	strb	r3, [r7, #19]
        break;
 8003f74:	e005      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ef      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d15b      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f88:	4b2b      	ldr	r3, [pc, #172]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01f      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d019      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fb2:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d016      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fd f8ea 	bl	80011bc <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fea:	e00b      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fec:	f7fd f8e6 	bl	80011bc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d902      	bls.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	74fb      	strb	r3, [r7, #19]
            break;
 8004002:	e006      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0ec      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10c      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004018:	4b07      	ldr	r3, [pc, #28]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004030:	e008      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	74bb      	strb	r3, [r7, #18]
 8004036:	e005      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004038:	40021000 	.word	0x40021000
 800403c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004044:	7c7b      	ldrb	r3, [r7, #17]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d105      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404a:	4ba0      	ldr	r3, [pc, #640]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	4a9f      	ldr	r2, [pc, #636]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004054:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004062:	4b9a      	ldr	r3, [pc, #616]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f023 0203 	bic.w	r2, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	4996      	ldr	r1, [pc, #600]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004084:	4b91      	ldr	r3, [pc, #580]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 020c 	bic.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	498e      	ldr	r1, [pc, #568]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040a6:	4b89      	ldr	r3, [pc, #548]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	4985      	ldr	r1, [pc, #532]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040c8:	4b80      	ldr	r3, [pc, #512]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d6:	497d      	ldr	r1, [pc, #500]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ea:	4b78      	ldr	r3, [pc, #480]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f8:	4974      	ldr	r1, [pc, #464]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	496c      	ldr	r1, [pc, #432]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800412e:	4b67      	ldr	r3, [pc, #412]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413c:	4963      	ldr	r1, [pc, #396]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004150:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415e:	495b      	ldr	r1, [pc, #364]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004172:	4b56      	ldr	r3, [pc, #344]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	4952      	ldr	r1, [pc, #328]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004194:	4b4d      	ldr	r3, [pc, #308]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	494a      	ldr	r1, [pc, #296]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b6:	4b45      	ldr	r3, [pc, #276]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	4941      	ldr	r1, [pc, #260]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d8:	4b3c      	ldr	r3, [pc, #240]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e6:	4939      	ldr	r1, [pc, #228]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d028      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041fa:	4b34      	ldr	r3, [pc, #208]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	4930      	ldr	r1, [pc, #192]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004218:	d106      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800421a:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004224:	60d3      	str	r3, [r2, #12]
 8004226:	e011      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004230:	d10c      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f000 f8f9 	bl	8004430 <RCCEx_PLLSAI1_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d04d      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004260:	d108      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004264:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004268:	4a18      	ldr	r2, [pc, #96]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800426e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004272:	e012      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800427a:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004280:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004292:	490e      	ldr	r1, [pc, #56]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a2:	d106      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a08      	ldr	r2, [pc, #32]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ae:	60d3      	str	r3, [r2, #12]
 80042b0:	e020      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ba:	d109      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a02      	ldr	r2, [pc, #8]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	60d3      	str	r3, [r2, #12]
 80042c8:	e014      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	2101      	movs	r1, #1
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f8a5 	bl	8004430 <RCCEx_PLLSAI1_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d028      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004300:	4b4a      	ldr	r3, [pc, #296]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800430e:	4947      	ldr	r1, [pc, #284]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800431a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800431e:	d106      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004320:	4b42      	ldr	r3, [pc, #264]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a41      	ldr	r2, [pc, #260]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432a:	60d3      	str	r3, [r2, #12]
 800432c:	e011      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004336:	d10c      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	2101      	movs	r1, #1
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f876 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800435e:	4b33      	ldr	r3, [pc, #204]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800436e:	492f      	ldr	r1, [pc, #188]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004380:	d10c      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f851 	bl	8004430 <RCCEx_PLLSAI1_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043a8:	4b20      	ldr	r3, [pc, #128]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ae:	f023 0204 	bic.w	r2, r3, #4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b8:	491c      	ldr	r1, [pc, #112]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d2:	f023 0218 	bic.w	r2, r3, #24
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	4913      	ldr	r1, [pc, #76]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d017      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004400:	490a      	ldr	r1, [pc, #40]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004412:	d105      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a04      	ldr	r2, [pc, #16]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004420:	7cbb      	ldrb	r3, [r7, #18]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000

08004430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800443e:	4b70      	ldr	r3, [pc, #448]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00e      	beq.n	8004468 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800444a:	4b6d      	ldr	r3, [pc, #436]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0203 	and.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d103      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
       ||
 800445e:	2b00      	cmp	r3, #0
 8004460:	d13f      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	e03c      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d00c      	beq.n	800448a <RCCEx_PLLSAI1_Config+0x5a>
 8004470:	2b03      	cmp	r3, #3
 8004472:	d013      	beq.n	800449c <RCCEx_PLLSAI1_Config+0x6c>
 8004474:	2b01      	cmp	r3, #1
 8004476:	d120      	bne.n	80044ba <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004478:	4b61      	ldr	r3, [pc, #388]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11d      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004488:	e01a      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800448a:	4b5d      	ldr	r3, [pc, #372]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004492:	2b00      	cmp	r3, #0
 8004494:	d116      	bne.n	80044c4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449a:	e013      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800449c:	4b58      	ldr	r3, [pc, #352]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10f      	bne.n	80044c8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044a8:	4b55      	ldr	r3, [pc, #340]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044b8:	e006      	b.n	80044c8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
      break;
 80044be:	e004      	b.n	80044ca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80044c0:	bf00      	nop
 80044c2:	e002      	b.n	80044ca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80044c4:	bf00      	nop
 80044c6:	e000      	b.n	80044ca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80044c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d108      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044d0:	4b4b      	ldr	r3, [pc, #300]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f023 0203 	bic.w	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4948      	ldr	r1, [pc, #288]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 8086 	bne.w	80045f6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044ea:	4b45      	ldr	r3, [pc, #276]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a44      	ldr	r2, [pc, #272]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f6:	f7fc fe61 	bl	80011bc <HAL_GetTick>
 80044fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044fc:	e009      	b.n	8004512 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fe:	f7fc fe5d 	bl	80011bc <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d902      	bls.n	8004512 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	73fb      	strb	r3, [r7, #15]
        break;
 8004510:	e005      	b.n	800451e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1ef      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d168      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d113      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800452a:	4b35      	ldr	r3, [pc, #212]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	4b35      	ldr	r3, [pc, #212]	; (8004604 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6892      	ldr	r2, [r2, #8]
 8004536:	0211      	lsls	r1, r2, #8
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	68d2      	ldr	r2, [r2, #12]
 800453c:	06d2      	lsls	r2, r2, #27
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6852      	ldr	r2, [r2, #4]
 8004544:	3a01      	subs	r2, #1
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	430a      	orrs	r2, r1
 800454a:	492d      	ldr	r1, [pc, #180]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800454c:	4313      	orrs	r3, r2
 800454e:	610b      	str	r3, [r1, #16]
 8004550:	e02d      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d115      	bne.n	8004584 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004558:	4b29      	ldr	r3, [pc, #164]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <RCCEx_PLLSAI1_Config+0x1d8>)
 800455e:	4013      	ands	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6892      	ldr	r2, [r2, #8]
 8004564:	0211      	lsls	r1, r2, #8
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6912      	ldr	r2, [r2, #16]
 800456a:	0852      	lsrs	r2, r2, #1
 800456c:	3a01      	subs	r2, #1
 800456e:	0552      	lsls	r2, r2, #21
 8004570:	4311      	orrs	r1, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6852      	ldr	r2, [r2, #4]
 8004576:	3a01      	subs	r2, #1
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	430a      	orrs	r2, r1
 800457c:	4920      	ldr	r1, [pc, #128]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	610b      	str	r3, [r1, #16]
 8004582:	e014      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004584:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	4b20      	ldr	r3, [pc, #128]	; (800460c <RCCEx_PLLSAI1_Config+0x1dc>)
 800458a:	4013      	ands	r3, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6892      	ldr	r2, [r2, #8]
 8004590:	0211      	lsls	r1, r2, #8
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6952      	ldr	r2, [r2, #20]
 8004596:	0852      	lsrs	r2, r2, #1
 8004598:	3a01      	subs	r2, #1
 800459a:	0652      	lsls	r2, r2, #25
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6852      	ldr	r2, [r2, #4]
 80045a2:	3a01      	subs	r2, #1
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	430a      	orrs	r2, r1
 80045a8:	4915      	ldr	r1, [pc, #84]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a13      	ldr	r2, [pc, #76]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fc fdff 	bl	80011bc <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c0:	e009      	b.n	80045d6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c2:	f7fc fdfb 	bl	80011bc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d902      	bls.n	80045d6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	73fb      	strb	r3, [r7, #15]
          break;
 80045d4:	e005      	b.n	80045e2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ef      	beq.n	80045c2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000
 8004604:	07ff800f 	.word	0x07ff800f
 8004608:	ff9f800f 	.word	0xff9f800f
 800460c:	f9ff800f 	.word	0xf9ff800f

08004610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800461e:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800462a:	4b6d      	ldr	r3, [pc, #436]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0203 	and.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d103      	bne.n	8004642 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
       ||
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13f      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	e03c      	b.n	80046c2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d00c      	beq.n	800466a <RCCEx_PLLSAI2_Config+0x5a>
 8004650:	2b03      	cmp	r3, #3
 8004652:	d013      	beq.n	800467c <RCCEx_PLLSAI2_Config+0x6c>
 8004654:	2b01      	cmp	r3, #1
 8004656:	d120      	bne.n	800469a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004658:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11d      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004668:	e01a      	b.n	80046a0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800466a:	4b5d      	ldr	r3, [pc, #372]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004672:	2b00      	cmp	r3, #0
 8004674:	d116      	bne.n	80046a4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467a:	e013      	b.n	80046a4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800467c:	4b58      	ldr	r3, [pc, #352]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10f      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004688:	4b55      	ldr	r3, [pc, #340]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004698:	e006      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
      break;
 800469e:	e004      	b.n	80046aa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80046a0:	bf00      	nop
 80046a2:	e002      	b.n	80046aa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80046a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80046b0:	4b4b      	ldr	r3, [pc, #300]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f023 0203 	bic.w	r2, r3, #3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4948      	ldr	r1, [pc, #288]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f040 8086 	bne.w	80047d6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046ca:	4b45      	ldr	r3, [pc, #276]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a44      	ldr	r2, [pc, #272]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d6:	f7fc fd71 	bl	80011bc <HAL_GetTick>
 80046da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046dc:	e009      	b.n	80046f2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046de:	f7fc fd6d 	bl	80011bc <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d902      	bls.n	80046f2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	73fb      	strb	r3, [r7, #15]
        break;
 80046f0:	e005      	b.n	80046fe <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046f2:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1ef      	bne.n	80046de <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d168      	bne.n	80047d6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d113      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800470a:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6892      	ldr	r2, [r2, #8]
 8004716:	0211      	lsls	r1, r2, #8
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68d2      	ldr	r2, [r2, #12]
 800471c:	06d2      	lsls	r2, r2, #27
 800471e:	4311      	orrs	r1, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6852      	ldr	r2, [r2, #4]
 8004724:	3a01      	subs	r2, #1
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	430a      	orrs	r2, r1
 800472a:	492d      	ldr	r1, [pc, #180]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	614b      	str	r3, [r1, #20]
 8004730:	e02d      	b.n	800478e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d115      	bne.n	8004764 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800473e:	4013      	ands	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6892      	ldr	r2, [r2, #8]
 8004744:	0211      	lsls	r1, r2, #8
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6912      	ldr	r2, [r2, #16]
 800474a:	0852      	lsrs	r2, r2, #1
 800474c:	3a01      	subs	r2, #1
 800474e:	0552      	lsls	r2, r2, #21
 8004750:	4311      	orrs	r1, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6852      	ldr	r2, [r2, #4]
 8004756:	3a01      	subs	r2, #1
 8004758:	0112      	lsls	r2, r2, #4
 800475a:	430a      	orrs	r2, r1
 800475c:	4920      	ldr	r1, [pc, #128]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800475e:	4313      	orrs	r3, r2
 8004760:	614b      	str	r3, [r1, #20]
 8004762:	e014      	b.n	800478e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004764:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004766:	695a      	ldr	r2, [r3, #20]
 8004768:	4b20      	ldr	r3, [pc, #128]	; (80047ec <RCCEx_PLLSAI2_Config+0x1dc>)
 800476a:	4013      	ands	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	0211      	lsls	r1, r2, #8
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6952      	ldr	r2, [r2, #20]
 8004776:	0852      	lsrs	r2, r2, #1
 8004778:	3a01      	subs	r2, #1
 800477a:	0652      	lsls	r2, r2, #25
 800477c:	4311      	orrs	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6852      	ldr	r2, [r2, #4]
 8004782:	3a01      	subs	r2, #1
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	430a      	orrs	r2, r1
 8004788:	4915      	ldr	r1, [pc, #84]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800478a:	4313      	orrs	r3, r2
 800478c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fc fd0f 	bl	80011bc <HAL_GetTick>
 800479e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047a0:	e009      	b.n	80047b6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047a2:	f7fc fd0b 	bl	80011bc <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d902      	bls.n	80047b6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	73fb      	strb	r3, [r7, #15]
          break;
 80047b4:	e005      	b.n	80047c2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	4903      	ldr	r1, [pc, #12]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000
 80047e4:	07ff800f 	.word	0x07ff800f
 80047e8:	ff9f800f 	.word	0xff9f800f
 80047ec:	f9ff800f 	.word	0xf9ff800f

080047f0 <__libc_init_array>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	4e0d      	ldr	r6, [pc, #52]	; (8004828 <__libc_init_array+0x38>)
 80047f4:	4c0d      	ldr	r4, [pc, #52]	; (800482c <__libc_init_array+0x3c>)
 80047f6:	1ba4      	subs	r4, r4, r6
 80047f8:	10a4      	asrs	r4, r4, #2
 80047fa:	2500      	movs	r5, #0
 80047fc:	42a5      	cmp	r5, r4
 80047fe:	d109      	bne.n	8004814 <__libc_init_array+0x24>
 8004800:	4e0b      	ldr	r6, [pc, #44]	; (8004830 <__libc_init_array+0x40>)
 8004802:	4c0c      	ldr	r4, [pc, #48]	; (8004834 <__libc_init_array+0x44>)
 8004804:	f000 f820 	bl	8004848 <_init>
 8004808:	1ba4      	subs	r4, r4, r6
 800480a:	10a4      	asrs	r4, r4, #2
 800480c:	2500      	movs	r5, #0
 800480e:	42a5      	cmp	r5, r4
 8004810:	d105      	bne.n	800481e <__libc_init_array+0x2e>
 8004812:	bd70      	pop	{r4, r5, r6, pc}
 8004814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004818:	4798      	blx	r3
 800481a:	3501      	adds	r5, #1
 800481c:	e7ee      	b.n	80047fc <__libc_init_array+0xc>
 800481e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004822:	4798      	blx	r3
 8004824:	3501      	adds	r5, #1
 8004826:	e7f2      	b.n	800480e <__libc_init_array+0x1e>
 8004828:	080048a0 	.word	0x080048a0
 800482c:	080048a0 	.word	0x080048a0
 8004830:	080048a0 	.word	0x080048a0
 8004834:	080048a4 	.word	0x080048a4

08004838 <memset>:
 8004838:	4402      	add	r2, r0
 800483a:	4603      	mov	r3, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <_init>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	bf00      	nop
 800484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484e:	bc08      	pop	{r3}
 8004850:	469e      	mov	lr, r3
 8004852:	4770      	bx	lr

08004854 <_fini>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr
